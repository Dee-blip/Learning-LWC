<!-- Author: Ruchika Sharma
    Version: 1.0
    Created date: 01/08/2016
    SFDC-1952: EMRI - New Product Wizard
-->
<apex:page standardStylesheets="false" showHeader="false" sidebar="2" applyHtmlTag="false" applyBodyTag="false" standardController="Opportunity" cache="true" extensions="addProductPageControllerMerged">
   <html xmlns:ng="http://angularjs.org" ng-app="addProdOpptyApp" lang="en">
      <head>
         <meta charset="utf-8" />
         <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
         <meta name="viewport" content="width=device-width, initial-scale=1"/>
         <title>Add Products To Opportunity</title>
         <!-- TODO: Check the effects and remove inclusion not needed-->
          

         <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/jquery.min.js')}"/>
         <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/bootstrap.min.js')}"/>
         <apex:stylesheet value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/css/bootstrap.min.css')}"/>
         <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/angular.min.js')}"/>
         <!-- <apex:includeScript value="{!URLFOR($Resource.Angular_JS, 'js/xeditable.min.js')}"/> -->
         <!-- <apex:includeScript value="{!$Resource.btn_addPlusSign}" /> -->
         <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/angular-sanitize.min.js')}"/>
         <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/ui-bootstrap-tpls.min.js')}"/>
         <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/angular-bootstrap-confirm.min.js')}"/>
         <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct , 'EMRIAddProduct/js/angular-messages.min.js')}"/>
         <apex:stylesheet value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/css/font-awesome.min.css')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/css/style.css')}"/>
         <script src="/soap/ajax/32.0/connection.js" type="text/javascript"></script>
         <script src="/soap/ajax/32.0/apex.js" type="text/javascript"></script>
         <script type="text/javascript">
            var __sfdcSessionId = '{!GETSESSIONID()}';
            sforce.connection.sessionId="{!$Api.Session_ID}";
            var app = angular.module("addProdOpptyApp",['mwl.confirm','ngMessages', 'ngSanitize']);
            // 'ui.bootstrap','ngSanitize' ["xeditable"]
            
            app.controller("addProdController", ['$scope','$templateCache','$http','$rootScope','$window',  function($scope,$templateCache,$http,$rootScope,$window) {

                // variables declaration and Initialization
                $scope.opp = {!OpptyJson};
                $scope.opp.CloseDate = new Date($scope.opp.CloseDate);
                $scope.originalLineItems = {!OliRecords};
                $scope.lineItems = {!OliRecords};
                $scope.addedLineItems = {!addedLineItems};
                $scope.competitor = {!competitor};
                $scope.emergingApp = {!emergingApp};
                $scope.carrierApp = {!carrierApp};
                $scope.aggPartner = {!aggPartner};
                $scope.addRow = true;
                $scope.statusMessageExists=false;
                $scope.showUndo = false;
                $scope.freeze = false;
                $scope.collapse = false;
                $scope.addError = false;
                $scope.carAppError = false;
                $scope.emergingProdError = false;
                $scope.negError = false;
                $scope.NAN = false;
                $scope.mrrNeg = false;
                // $scope.fromChurn = false;
                $scope.Unacceptable_Terms_and_Conditions = false;
                $scope.Initial_Out_Clause_Description = false;
                $scope.Aggregation_Partner = false;
                $scope.Consolidation_Account_Id = false;
                $scope.Competitor = false;
                $scope.Missing_Product_Feature = false;
                $scope.requiredError = false;
                $scope.profile = {!Profile};
                console.log('$scope.profile:');
                console.log($scope.profile);
                $scope.editingData = {};
                $scope.originalLineItem = {};
                $scope.modifiedLineItemIndex = [];
                $scope.originalLineItemIndex = [];
                $scope.isEditing = false;
                $scope.isMrrNegLineItem = false;
                $scope.noPaperMandate = false;
                // $scope.commitChanged = false;
                $scope.emriChanged = false;
                $scope.rowExisting = false;
                // $scope.fromResetFactory = false;
                $scope.oliIndex;
                $scope.Churn_No_Paper_List = {}
                $scope.opptycategorytosubcategory = {!OpportunityCategoryToSubCategoryMap};
                $scope.opptysubcategorytolossreason = {!OpportunitySubCategoryToLossReasonMap};
                $scope.prod = {!Products};
                $scope.selectedValues = [];
                $scope.mapOfFieldToHelpTextOrError = {!FieldsToHelpText};
                $scope.setSaveReturn = false;
                $scope.mapOfFieldToValue = {!FieldsToValue};
                $scope.churnOptions = [
                      {value: '', label: 'Choose a value'},
                      {value: 'Yes', label: 'Yes'},
                      {value: 'No', label: 'No'},
                  ];
                if($scope.opp.CarrierApplication!=null && $scope.opp.CarrierApplication!=undefined)
                  angular.forEach($scope.opp.CarrierApplication.split(';'), function(val){
                    $scope.selectedValues.push( val );
                  });
     
              // initialise list of opportunity category, sub category and loss reason
               $scope.listofcategory = [];
               // SFDC-1290
               $scope.linkToFAQ = {!linkToFAQ};
               angular.forEach($scope.opptycategorytosubcategory, function(value,key)
               {
                  $scope.listofcategory.push(key);

               });

               $scope.listofsubcategory = $scope.opptycategorytosubcategory[$scope.opp.Opportunity_Category];
              $scope.listoflossreason = $scope.opptysubcategorytolossreason[$scope.opp.Opportunity_Sub_Category];
                
                 $scope.mapOfFieldToTemplate = {!FieldsToTheirEditMode};
                $scope.mapOfFieldToMode   = [];

                angular.forEach($scope.mapOfFieldToTemplate,function(value,key)
                {
                    $scope.mapOfFieldToMode[key] = false;
                });

               for (var i = 0, length = $scope.lineItems.length; i < length; i++) {
                      $scope.editingData[i] = false;
               }
        
                // Methods to support UI functionalities

                $scope.setMode = function(field)
                {
                          $scope.mapOfFieldToMode[field] = true;
                          // console.log('Im here' + field + $scope.mapOfFieldToMode[field]);
                };

                $scope.unsetMode = function(field)
                {
                          $scope.mapOfFieldToMode[field] = false;
                };
                
                // Function get called on click of Add Product button
               $scope.addProd = function(){
                        $scope.singleLineItem = {!OliRecord};
                        
                        $scope.addedLineItems.push($scope.singleLineItem);
                        $scope.showRow = true;
                        $scope.prodAddedOrDeleted = true;
            
                   };

                   // Function get called on click of delete link
                   $scope.delete = function(item,intVar){
                        if(intVar==1){
                            $scope.addedLineItems.splice($scope.addedLineItems.indexOf(item), 1);
                        }
                        else if(intVar==0){
                            $scope.lineItems.splice($scope.lineItems.indexOf(item), 1);
                            $scope.prodAddedOrDeleted = true;

                        }
                        $scope.isEditing = true;
                  };


                  // Function get called on click of edit link
                    $scope.modify = function(index,existingNew,oli){
                        var index1 = $scope.lineItems.indexOf(oli);
                        $scope.modifiedLineItemIndex[$scope.modifiedLineItemIndex.length] = index1;

                        console.log('modify');

                        console.log(index1);
                        $scope.originalLineItem[index] = angular.copy(oli);
                        $scope.originalLineItemIndex[$scope.originalLineItemIndex.length] = index;
                        $scope.editingData[index] = true;
                        if(existingNew==1)
                            $scope.onlyNewEdit = true;
                        oli.undoLink = true;
                        
                    };


                    $scope.update = function(index){
                        $scope.editingData[index] = false;
                    };

                    // Function get called on click of undo link
                    $scope.undoLineItem = function(oli,index){
                      var indexNew = $scope.lineItems.indexOf(oli);
                      $scope.lineItems[indexNew] = $scope.originalLineItem[index];
                      $scope.editingData[index] = false;
                      };
                   
                   // Function to identify if the line item is existing (coming from contract) or new
                   $scope.isDelete = function(curMonthlyCommitFee,curAvgRevNonCommit){
                      
                       if ((angular.isUndefined(curMonthlyCommitFee) || curMonthlyCommitFee === null) && (angular.isUndefined(curAvgRevNonCommit) || curAvgRevNonCommit === null)){                        
                          $scope.rowExisting = false;
                           return true;                        
                         }
                       else{
                          $scope.rowExisting = true;
                           return false;
                         }
                   };


                  // Function returns string based on if the line item is existing (coming from contract) or new
                   $scope.existing = function(oli){
                      // console.log('calling existing');
                      // console.log(oli);
                      if($scope.isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit))
                        return 'non existing';
                      else
                        return 'existing';
                   }

                   // Function get called on click of cancel link
                    // $scope.cancel = function(item,indexLine){
                    // // console.log($scope.lineItems[index]);
                    // var index = $scope.lineItems.indexOf(item);
                    // $scope.modifiedLineItemIndex[$scope.modifiedLineItemIndex.length] = index;
                    // $scope.originalLineItemIndex[$scope.originalLineItemIndex.length] = indexLine;
                    // $scope.originalLineItem[indexLine] = angular.copy(item);
                    // // $scope.lineItems[index].projMonthlyCommitFee = 0;
                    // // $scope.lineItems[index].projOneTimeFee = 0;
                    // // $scope.lineItems[index].projAvgRevNonCommit = 0;
                    // if($scope.lineItems[index].curMonthlyCommitFee!=null && $scope.lineItems[index].curMonthlyCommitFee!=undefined && $scope.lineItems[index].curMonthlyCommitFee!='')
                    //   $scope.lineItems[index].netMRR = $scope.lineItems[index].projMonthlyCommitFee-$scope.lineItems[index].curMonthlyCommitFee;
                    // else
                    //   $scope.lineItems[index].netMRR = $scope.lineItems[index].projMonthlyCommitFee;
                    // $scope.isEditing = true;
                    // $scope.lineItems[index].undoLink = true;
                    // };

                   // Function to calculate net MRR
                   $scope.netMRR = function(item,arr,intVar){
                    // if($scope.editingData[index]){
                      var index = arr.indexOf(item);
                      // intVar = 1 -> new prod and 0 -> existing prods.
                      console.log('item.projMonthlyCommitFee: '+item.projMonthlyCommitFee);
                      if(item.curMonthlyCommitFee!=null && item.curMonthlyCommitFee!=undefined && item.curMonthlyCommitFee!='')
                        item.curMonthlyCommitFee = 0.00; //Existing baseline should become 0 for EMRI 2.0 pilot
                    if(item.curAvgRevNonCommit!=null && item.curAvgRevNonCommit!=undefined && item.curAvgRevNonCommit!='')
                      item.curAvgRevNonCommit = 0.00; //Existing baseline should become 0 for EMRI 2.0 pilot
                        console.log('item.curMonthlyCommitFee:: '+item.curMonthlyCommitFee);
                        console.log('item.curAvgRevNonCommit:: '+item.curAvgRevNonCommit);
                        value = item.netMRR;
                      if(intVar==1){
                          $scope.addedLineItems[index].projMonthlyCommitFee = value;
                          console.log('$scope.addedLineItems[index].netMRR: '+$scope.addedLineItems[index].netMRR);
                      }
                      else{
                          $scope.lineItems[index].projMonthlyCommitFee = value;
                          console.log('$scope.lineItems[index].netMRR: '+$scope.lineItems[index].netMRR);
                      }
                          
                      //return value;               
                      // }     
                   };

                   // Function to calculate net Non commit
                  

                   // Function to calculate net Emri
                   $scope.netEMRI = function(item,arr,intVar){
                    var index = arr.indexOf(item);
                    console.log('$scope.netMRR(item,arr,intVar): '+item.projMonthlyCommitFee);
                    console.log('item.projAvgRevNonCommit: '+item.projAvgRevNonCommit+ ' intVar: '+intVar);

                    value = item.emri-item.projMonthlyCommitFee;
                    if(intVar==1){
                        $scope.addedLineItems[index].projAvgRevNonCommit = value;
                        $scope.addedLineItems[index].netNonCommit = $scope.addedLineItems[index].projAvgRevNonCommit;
                        console.log('$scope.lineItems[index].emri: '+$scope.addedLineItems[index].emri);
                        console.log('$scope.addedLineItems[index].projAvgRevNonCommit: '+$scope.addedLineItems[index].projAvgRevNonCommit);
                    }
                    else{
                        $scope.lineItems[index].projAvgRevNonCommit = value;
                        $scope.lineItems[index].netNonCommit = $scope.lineItems[index].projAvgRevNonCommit;
                      // $scope.lineItems[index].netMRR+$scope.lineItems[index].netNonCommit;
                      console.log('$scope.lineItems[index].emri: '+$scope.lineItems[index].emri);

                    console.log('$scope.addedLineItems[index].projAvgRevNonCommit: '+$scope.lineItems[index].projAvgRevNonCommit);
                    }
                    
                    // return value;   
                   };

                  // Function to revalidate prodNameSelect, oppCat, oppSubCat and oppLossReason fields on click of save
                   $scope.reValidate = function(){
                    console.log('revlaidating: ');
                    $scope.addProdForm.submitted = false;
                    
                    // angular.forEach($scope.prodIndex,function(item){
                    for(var i=0; i<$scope.addedLineItems.length;i++){
                      if($scope.addProdForm['prodNameSelect'+i]!=undefined)
                        $scope.addProdForm['prodNameSelect'+i].$validate();
                    }
                    // console.log($scope.mrrTotal);
                    if($scope.addProdForm['oppCat']!=undefined)
                      $scope.addProdForm['oppCat'].$validate();
                    if($scope.addProdForm['oppSubCat']!=undefined)
                      $scope.addProdForm['oppSubCat'].$validate();
                    if($scope.addProdForm['oppLossReason']!=undefined)
                      $scope.addProdForm['oppLossReason'].$validate();
                   }
                   
                   // Function to calculate total of MRR, EMRI and non commit
                   $scope.calculateTotal = function(){  
                    var extendedLineItems = $scope.lineItems.concat($scope.addedLineItems);
                    // console.log(extendedLineItems);
                    $scope.isMrrNegLineItem = false;
                    $scope.mrrTotal = 0; 
                    $scope.opp.emriTotal = 0; 
                    angular.forEach(extendedLineItems, function(item){
                        // console.log(item);

                      $scope.mrrTotal += item.netMRR;
                      $scope.opp.emriTotal += item.emri;
                      // debugger;
                      if(item.netMRR<0)
                        $scope.isMrrNegLineItem=true;
                    })  
                       
                   };

                  

                   // helper method
                    $scope.createStringByArray = function(array) {
                      var output = '';
                      console.log('createStringByArray');
                      console.log(array); 
                      if(array!=null && array!=undefined)
                      angular.forEach(array, function (object) {
                          
                              output += object + ';';
                                            
                      })
                      output = output.slice(0, -1);
                      return output;
                  };

                  Visualforce.remoting.timeout = 120000;
                  // Function that gets called on click of Save & Return Button
                    $scope.saveAndReturn = function(){
                      console.log('calling saveAndReturn');
                      console.log('dirty and editing: '+$scope.addProdForm.$dirty +' : '+ $scope.isEditing);
                      $scope.setSaveReturn = true;
                      if($scope.addProdForm.$dirty || $scope.isEditing){
                        // if($scope.save())
                        //   $window.location.href = $scope.opp.opptyLink;  

                        
                        $scope.save();
                        
                      }
                      else
                        $window.location.href = $scope.opp.opptyLink;
                   };
                

                   $scope.changedFields = [];
                   $scope.emriChangeCapture = function(){
                    console.log('emriChangeCapture called');
                    console.log($scope.originalLineItem);
                    console.log($scope.modifiedLineItemIndex);
                    console.log($scope.originalLineItemIndex);
                    // debugger;
                    // $scope.addProdForm['projAvgRevNonCommit'+$scope.modifiedLineItemIndex[i]].$dirty && 
                    // $scope.addProdForm['projMonthlyCommitFee'+$scope.modifiedLineItemIndex[i]].$dirty &&
                    for(var i=0; i<$scope.modifiedLineItemIndex.length;i++){
                        
                      console.log($scope.originalLineItem[$scope.originalLineItemIndex[i]].projAvgRevNonCommit);
                      console.log($scope.lineItems[$scope.modifiedLineItemIndex[i]].projAvgRevNonCommit);
                        if($scope.originalLineItem[$scope.originalLineItemIndex[i]].emri!=$scope.lineItems[$scope.modifiedLineItemIndex[i]].emri){
                          console.log('$scope.addProdForm[emri]');
                          console.log($scope.addProdForm['emri'+i]);
                          
                          $scope.emriChanged = true;
                        }
                       }
                     
                    // if($scope.emriChanged){
                    //   for(var i=0; i<$scope.addedLineItems.length;i++){
                          
                    //       if($scope.addProdForm['emri'+i].$dirty )
                    //         $scope.emriChanged = true;
                          
                    //     }
                    // }

                   // if($scope.prodAddedOrDeleted){
                   //    $scope.usageChanged = true;
                   //    $scope.commitChanged = true;
                   // }
                      // field has no value
                      // if($scope.opp.EMRI_Utilization==null || $scope.opp.EMRI_Utilization=='' || $scope.opp.EMRI_Utilization=='undefined'){
                      //   if($scope.commitChanged)
                      //     $scope.opp.EMRI_Utilization = 'Commit';
                      //   if($scope.usageChanged){
                      //     if($scope.opp.EMRI_Utilization==null || $scope.opp.EMRI_Utilization=='' || $scope.opp.EMRI_Utilization=='undefined')
                      //       $scope.opp.EMRI_Utilization = 'Usage';
                      //     else
                      //       $scope.opp.EMRI_Utilization += ';Usage';
                      //   }
                      // }// field has any one value
                      // else{
                      //   if(($scope.commitChanged && $scope.opp.EMRI_Utilization.indexOf('Commit')==-1) || ($scope.usageChanged && $scope.opp.EMRI_Utilization.indexOf('Usage')==-1))
                      //     $scope.opp.EMRI_Utilization = 'Commit;Usage';
                        
                      // }
                      if($scope.emriChanged)
                        $scope.opp.Updated_By_Emri_Desk_Post_Commit = true;
                      console.log('$scope.emriChanged');
                      console.log($scope.emriChanged);
                      
                      console.log($scope.opp.Updated_By_Emri_Desk_Post_Commit);

                   };

                   $scope.setProdFormSubmit = function(){
                    $scope.addProdForm.submitted = false;
                    console.log('in setProdFormSubmit');
                    console.log($scope.addProdForm.submitted);
                   };

                   $scope.save = function()
                  {
                    console.log('in save: '+$scope.addProdForm.$valid);
                    console.log('scope.unacceptableTerms: '+$scope.Unacceptable_Terms_and_Conditions);
                    console.log($scope.opp.Churn_No_Paper);
                    // resetting variable so as to test fresh on input
                    $scope.negError = false;
                    $scope.NAN = false;
                    $scope.reValidate();
                    if($scope.addProdForm.$valid) {
                      $scope.setProdFormSubmit();
                      $scope.isEditing = false;
                      $scope.addProdForm.$dirty = false;
                      console.log("form sent");
                      console.log($scope.addProdForm.$dirty);
                      
                    }else{
                      // If for, is invalid, show errors
                      $scope.addProdForm.submitted = true;
                      console.log($scope.addProdForm.submitted);
                      console.log('in else part');
                      console.log($scope.addProdForm.churnPaperSelect.$error)
                      for(var i=0; i<$scope.addedLineItems.length;i++){
                        if($scope.addProdForm['prodNameSelect'+i].$error.required)
                          $scope.requiredError = true;
                        if($scope.addProdForm['prodNameSelect'+i].$error.carrierProd){
                          $scope.carAppError = true;
                        }
                        if($scope.addProdForm['prodNameSelect'+i].$error.emergingProd){
                          $scope.emergingProdError = true;
                        }
                      }
                      // var extendedLineItems = .concat();

                      for(var i=0; i<$scope.lineItems.length;i++){
                        console.log('in save errror:');
                        // console.log($scope.addProdForm['projMonthlyCommitFee'+i].$error);
                        // SFDC-1288
                        if($scope.addProdForm['projOneTimeFee'+i].$error.min){
                          $scope.negError = true;
                        }
                        if($scope.addProdForm['projOneTimeFee'+i].$error.number||$scope.addProdForm['netMRR'+i].$error.number||$scope.addProdForm['emri'+i].$error.number){
                          $scope.NAN = true;
                        }
                      }
                      
                      for(var i=0; i<$scope.addedLineItems.length;i++){
                        // SFDC-1288
                        if($scope.addProdForm['projOneTimeFeeAdd'+i].$error.min){
                          $scope.negError = true;
                        }
                        if($scope.addProdForm['projOneTimeFeeAdd'+i].$error.number||$scope.addProdForm['netMRRAdd'+i].$error.number||$scope.addProdForm['emriAdd'+i].$error.number){
                          $scope.NAN = true;
                        }
                      }
                      if($scope.addProdForm.oppCat.$error.mrrOppCatNeg||$scope.addProdForm.oppSubCat.$error.mrrOppCatNeg||$scope.addProdForm.oppLossReason.$error.mrrOppCatNeg)
                        $scope.mrrNeg = true;
                      console.log("form failed");
                      return;
                      
                    }
                    
                      document.getElementById('loading').style.visibility='visible';
                    $scope.opp.isMrrNegLineItem = $scope.isMrrNegLineItem;
                    $scope.opp.CarrierApplication = $scope.createStringByArray($scope.selectedValues );
                    var extendedLineItems = $scope.lineItems.concat($scope.addedLineItems);
                    // update EMRI_Utilization only when it does'nt have both commit and usage populated
                    console.log('$scope.opp.EMRI_Utilization');
                    console.log($scope.opp.EMRI_Utilization);
                    

                    console.log($scope.lineItems);
                    // if($scope.opp.EMRI_Utilization==null || ($scope.opp.EMRI_Utilization!=null && $scope.opp.EMRI_Utilization.indexOf('Commit;Usage') == -1))
                    console.log('isEMRIDeskUser'+$scope.opp.isEMRIDeskUser);
                    if($scope.opp.isEMRIDeskUser)
                      $scope.emriChangeCapture();
                 
                    Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.addProductPageControllerMerged.save}',
                        angular.toJson(extendedLineItems),angular.toJson($scope.opp),angular.toJson($scope.originalLineItems),
                              function(result,event)
                              {
                                    // $scope.statusMessageExists=true;
                                    console.log('result:');
                                    console.log(result);
                                    console.log(event.status);
                                    console.log(event.message);
                                    console.log(event.type);
                                    $scope.statusMessage = [];
                                    if(result!=null && result!=undefined){
                                      $scope.statusMessageExists=true;
                                      $scope.statusMessage = Object.keys(result).map(function(k) { return result[k] });
                                      console.log('statusMessage' + $scope.statusMessage);
                                      console.log('relenght'+$scope.statusMessage.length);
                                      document.getElementById('loading').style.visibility='hidden';
                                    }
                                    else if(event.status && event.status.length>0)
                                    {
                                        $scope.statusMessageExists=true;
                                        $scope.statusMessage = Object.keys(result).map(function(k) { return result[k] });
                                        console.log('result2'+result);
                                        document.getElementById('loading').style.visibility='hidden';
                                    }
                                    else if(event.type==='exception' )
                                    {   console.log('event.type: '+event.type);
                                    console.log(result);
                                        $scope.statusMessageExists=true;
                                        if(result!=undefined && result!=null && result!=''){
                                         $scope.statusMessage = Object.keys(result).map(function(k) { return result[k] });
                                      }
                                        console.log('excep'+event.message);
                                        console.log(result);
                                        document.getElementById('loading').style.visibility='hidden';
                                        
                                    }
                                    else
                                    {
                                        console.log('succeeded'+event.message);
                                        location.reload();
                                    }
                                    $scope.$apply();
                                    if($scope.setSaveReturn)
                                        $window.location.href = $scope.opp.opptyLink;
                                    // location.reload();
                              }
                        );

                  };

                    //  $scope.resetFactory = function(){
                    //     var extendedLineItems = $scope.lineItems.concat($scope.addedLineItems);
                    //     $scope.lineItemCopy = angular.copy($scope.lineItems);
                    //     $scope.addedLineItemCopy = angular.copy($scope.addedLineItems);

                    //     angular.forEach(extendedLineItems, function(item){
                    //     // console.log(item$);
                        
                    //     if(item.curMonthlyCommitFee!=null && item.curMonthlyCommitFee!=undefined && item.curMonthlyCommitFee!='')
                    //       item.projMonthlyCommitFee = item.curMonthlyCommitFee;
                    //     else
                    //       item.projMonthlyCommitFee = 0;
                    //     if(item.curAvgRevNonCommit!=null && item.curAvgRevNonCommit!=undefined && item.curAvgRevNonCommit!='')
                    //       item.projAvgRevNonCommit = item.curAvgRevNonCommit;
                    //     else
                    //       item.projAvgRevNonCommit = 0;
                    //        })
                    
                    //     $scope.showRow = false;
                    //     $scope.addRow = false;
                    //     $scope.fromResetFactory = true;
                    //     $scope.addedLineItems = [];
                    //     $scope.showUndo = true;
                    //     $scope.freeze = true;
                    //     $scope.isEditing = true;
                        
                    // };

                    $scope.undo = function(){
                        $scope.lineItems = $scope.lineItemCopy;
                        $scope.addedLineItems = $scope.addedLineItemCopy;
                        // if($scope.fromChurn){
                          // $scope.opp.Opportunity_Category = $scope.oppCat;
                          // $scope.setOpportunitySubCategory();
                          // $scope.opp.Opportunity_Sub_Category = $scope.oppSubCat;
                                            
                        // }
                        // $scope.opp = $scope.oppCopy;
                        $scope.showUndo = false;
                        $scope.addRow = true;
                        $scope.freeze = false;
                        $scope.isEditing = false;
                        $scope.opp.Churn_No_Paper = $scope.churnCopy;
                        $scope.noPaperMandate = false;
                        // $scope.addProdForm.submitted = false;
                        $scope.setProdFormSubmit();

                    };

                    $scope.reset = function(){
                        location.reload();
                    };
                    $scope.collapseToggle = function(){
                        if($scope.collapse)
                            $scope.collapse = false;
                        else
                            $scope.collapse = true;
                    };
                    $scope.isNeg = function(value){
                      if(value<0)
                        return true;
                      else
                        return false;
                    };
                   $scope.setSelectedAccount = function(accountId,accountName)
                    {
                        $scope.opp.Consolidation_Account_Name = accountName;
                        $scope.opp.Consolidation_Account_Id = accountId;
                        $scope.addProdForm['oppLossReason'].$validate();
                        console.log($scope.opp.Consolidation_Account_Id);
           
                     };

                    $scope.searchAccount = function(accountName)
                    {
                        document.getElementById('loading-in-table').style.visibility='visible';

                        Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.addProductPageControllerMerged.searchAccount}',
                                accountName,
                                          function(result,event)
                                          {
                                               console.log(result);
                                               $scope.accountdetails = result;
                                               $scope.$apply();
                                               document.getElementById('loading-in-table').style.visibility='hidden';


                                          }
                                   );
                      };

                         $scope.setOpportunitySubCategory = function()
                      {
                        // debugger;
                         $scope.listofsubcategory = [];
                         $scope.listofsubcategory = $scope.opptycategorytosubcategory[$scope.opp.Opportunity_Category];
                         console.log('here'+ $scope.listofsubcategory);

                      };

                      $scope.setLossReason = function()
                      {
                         $scope.listoflossreason = [];
                         $scope.listoflossreason = $scope.opptysubcategorytolossreason[$scope.opp.Opportunity_Sub_Category];
                        console.log($scope.listoflossreason);

                      };
            }]);

// Start of directives for validations
    app.directive('confirmOnExit', function() {

        return {
            link: function($scope, elem, attrs) {
                window.onbeforeunload = function(){
                    if ($scope.addProdForm.$dirty || $scope.isEditing) {
                        return "The form is dirty, do you want to stay on the page?";
                    }
                }
                $scope.$on('$locationChangeStart', function(event, next, current) {
                    if ($scope.addProdForm.$dirty || $scope.isEditing) {
                        if(!confirm("The form is dirty, do you want to stay on the page?")) {
                            event.preventDefault();
                        }
                    }
                });
            }
        };
    });
    app.directive('customValidate', [function() {
      return {
        // restrict to an attribute type.
        restrict: 'A',
        
        // element must have ng-model attribute.
        require: 'ngModel',
        // scope = the parent scope
        // elem = the element the directive is on
        // attr = a dictionary of attributes on the element
        // ctrl = the controller for ngModel.
        link: function(scope, elem, attr, ctrl) {
            
              var idToFamilyMap={};
              var idToItemNameMap = {};
              
              var emrgingItemName=false;
              angular.forEach(scope.prod, function(item){
              idToFamilyMap[item.PricebookEntries.records[0].Id] = item.Family;               
              idToItemNameMap[item.PricebookEntries.records[0].Id]= item.Name;
                
              });
              var newAddedli = [];
            ctrl.$validators.carrierProd = function(value) {
        
              console.log('in carrierProd: '+scope.addProdForm.$valid);
              var carApp = scope.selectedValues;
              scope.carAppError = false;
              var carFamily=false;
              
              angular.forEach(scope.addedLineItems,function(lineItem){
                 if(idToFamilyMap[lineItem.productName]== "Carrier" || idToFamilyMap[value] == "Carrier"){
                    carFamily = true;
                  }
              });
             
              var carAppVar = '';
              if(carApp != undefined && carApp.length == 0)
                carAppVar = null;

              if((angular.isUndefined(carApp) || carApp == null || carAppVar == null) && carFamily){
              
                return false;
              }              
              else{
                return true;
              }
             }

             ctrl.$validators.emergingProd = function(value) {
              var emergingApp = scope.opp.Emerging_Application;
              scope.emergingProdError = false;
              
              angular.forEach(scope.addedLineItems,function(lineItem){
                console.log('emerging name');
                console.log(scope.mapOfFieldToValue['Prod_name_for_Emerging_validation']);
                 if(idToItemNameMap[lineItem.productName]== "Emerging Mobile" || idToItemNameMap[value] == "Emerging Mobile"){
                    emrgingItemName = true;
                  }
           
              });
           
            if((angular.isUndefined(emergingApp) || emergingApp == null) && emrgingItemName)
               return false;
              else
                return true;
              
             }
             

            }
          };
      }]);

 app.directive('customValidateCompetitorOpp', [function() {
      return {
        // restrict to an attribute type.
        restrict: 'A',
        
        // element must have ng-model attribute.
        require: 'ngModel',
       
        // scope = the parent scope
        // elem = the element the directive is on
        // attr = a dictionary of attributes on the element
        // ctrl = the controller for ngModel.
        link: function(scope, elem, attr, ctrl) {
           
             ctrl.$validators.competitor = function(value) {
              var stage = scope.opp.stageName;
              var stageFirstChar = parseInt(stage.charAt(0));
              
              if((scope.profile.indexOf('SA')==0 || scope.profile.indexOf('Sales')==0) && stageFirstChar>2 && (value==null || angular.isUndefined(value) || value=='--None--'))
                return false;
              else
                return true;

             }
          
            }
          };
      }]);
 app.directive('customValidateMrrOpp', [function() {
      return {
        // restrict to an attribute type.
        restrict: 'A',
        
        // element must have ng-model attribute.
        require: 'ngModel',
       
        // scope = the parent scope
        // elem = the element the directive is on
        // attr = a dictionary of attributes on the element
        // ctrl = the controller for ngModel.
        link: function(scope, elem, attr, ctrl) {
          
             ctrl.$validators.mrrOppCatNeg = function(value) {
              var recordTypeName = scope.opp.RecordTypeName;
              if(scope.profile.indexOf('Sales')==0 && recordTypeName=='Akamai Opportunity' && ((value==null || angular.isUndefined(value) || value=='--None--' || value=='')) && scope.isMrrNegLineItem){
               return false;
              }
              else{
               return true;
              }

             }

            }
          };
      }]);
  app.directive('customValidateLossReason', [function() {
      return {
        // restrict to an attribute type.
        restrict: 'A',
        // priority: -1,
        // element must have ng-model attribute.
        require: ['^?addProdController','ngModel'],
       
        // scope = the parent scope
        // elem = the element the directive is on
        // attr = a dictionary of attributes on the element
        // ctrl = the controller for ngModel.
        link: function(scope, elem, attr, ctrls) {
          console.log(ctrls);
              var parent1 = ctrls[0];
              var ctrl = ctrls[1];
              console.log('parent1:');
              console.log(parent1);
              console.log(ctrl);
             ctrl.$validators.lossReasonValue = function(elemvalue) {
                var lossReason = scope.opp.Loss_Reason;
              
              var recordTypeName = scope.opp.RecordTypeName;
              var lossvalue = {};
              
              lossvalue[scope.mapOfFieldToValue['Unacceptable_Terms_and_Conditions']] = 'Unacceptable_Terms_and_Conditions';
              lossvalue[scope.mapOfFieldToValue['Initial_Out_Clause_Description']] = "Initial_Out_Clause_Description";
              lossvalue[scope.mapOfFieldToValue['Aggregation_Partner']] = "Aggregation_Partner";
              lossvalue[scope.mapOfFieldToValue['Consolidation_Account_Id']] = "Consolidation_Account_Id";
              lossvalue[scope.mapOfFieldToValue['Missing_Product_Feature']] = "Missing_Product_Feature";
            
              lossvalue[scope.mapOfFieldToValue['Competitor']] = "Competitor";
              lossvalue[scope.mapOfFieldToValue['Competitor_2']] = "Competitor";
              lossvalue[scope.mapOfFieldToValue['Competitor_3']] = "Competitor";
              
             
              scope.Unacceptable_Terms_and_Conditions = false;
              scope.Initial_Out_Clause_Description = false;
              scope.Aggregation_Partner = false;
              scope.Consolidation_Account_Id = false;
              scope.Competitor = false;
              scope.Missing_Product_Feature = false;
              var formValidity = true;
              console.log(lossvalue);
              // console.log(lossvalue[elemvalue]);
              // if((lossvalue[elemvalue]!=undefined && lossvalue[elemvalue]!=null)||(lossvalue[lossReason]!=undefined && lossvalue[lossReason]!=null)){
              //     var value = (lossvalue[elemvalue]!=undefined?lossvalue[elemvalue]:lossvalue[lossReason])
              //    if(scope.profile=='Sales' && recordTypeName=='Akamai Opportunity' && (scope.opp[value]==null || angular.isUndefined(scope.opp[value]) || scope.opp[value]=='--None--')){
              //     console.log('validation failed');
              //     scope[value] = true;
              //     // scope.$apply();
              //     // keepGoing = false;
              //     formValidity = false;
              //   }
              // }
              angular.forEach(lossvalue, function(value,key){
                if(scope.profile.indexOf('Sales')==0 && recordTypeName=='Akamai Opportunity' && ((lossReason==key || elemvalue == key) && (scope.opp[value]==null || angular.isUndefined(scope.opp[value]) || scope.opp[value]=='--None--'))){

                  console.log('validation failed');
                  scope[value] = true;   
                  formValidity = false;
                }
                
              
            });
              // need this check as key cannot be repeated in map and its same for Missing_Product_Feature
              if(((elemvalue==scope.mapOfFieldToValue['Competitor_2']||lossReason==scope.mapOfFieldToValue['Competitor_2']) && (scope.opp['Missing_Product_Feature']==null || angular.isUndefined(scope.opp['Missing_Product_Feature']) || scope.opp['Missing_Product_Feature']=='--None--'))){
                  scope.Missing_Product_Feature = true;
                  formValidity = false;
              }
              console.log('in lossReasonValue keepGoing: '+scope.addProdForm.$valid +' : '+ formValidity);
              if(formValidity)
                scope.setProdFormSubmit();
              return formValidity;
              
             }

            }
          };
      }]);
// SFDC-1288 : Directive to check if input is positive or not -> being used in projected fields
// commenting out this directive because its not used currently, but not removing it as it can be used later.
// app.directive('inputPositive', [function() {
//     return {
//         // restrict: 'A',
//         require: 'ngModel',
//         link: function(scope, elem, attrs, ctrl) {
//             if (!ctrl) return;
//             ctrl.$validators.positive = function(value) {
//                 console.log('inputPositive');
//                 console.log(value && value >= 0);
//                 return value && value >= 0;
//             };
//         }
//     };
// }]);
         </script>
         <!-- sonali - To do: please remove these styles out of page to style sheet -->
         <style>
         .table-fixed thead {
  width: 97%;
}
.table-fixed tbody {
  height: 230px;
  overflow-y: auto;
  overflow-x: auto;
  width: 100%;
}
.table-fixed thead, .table-fixed tbody, .table-fixed tr, .table-fixed td, .table-fixed th {
  display: block;
}
.table-fixed tbody td, .table-fixed thead > tr> th {
  float: left;
  border-bottom-width: 0;
}

.account-search-dialog
{
  width: 80%;
}
</style>
        <script>
$(document).ready(function(){
    // $('[data-toggle="tooltip"]').tooltip();
    $('[data-toggle="popover"]').popover({'trigger':'hover'});
});
</script>
      </head>
      <body id="addContainer" ng-cloak="x">
      <div class="container-placeholder">
          <div ng-controller="addProdController" ng-init="isCollapsed = !isCollapsed">
          <!-- Start of loading icon -->
              <div id="loading">
                  <img id="loading-image" alt="Loading..." src="{!URLFOR($Resource.EMRIAddProduct,'EMRIAddProduct/images/loading_gears.gif')}"/>
              </div>
          <!-- End of loading icon -->
          <!-- Start of title-->
              <div class="row page-title-row">
                  <h3> Manage Products </h3>
              </div>
          <!-- End of title -->
          <!-- Start of top button row-->
              <div class = "row text-center top-buttons-row clearfix">
              <!-- <div class="btn-group col-xs-5 col-md-5"> -->
                 <button class="btn top-button" type="submit" ng-click="saveAndReturn()">{{mapOfFieldToValue['btn_saveAndReturn']}}</button>
                    <button class="btn top-button" ng-show="addProdForm.$dirty || isEditing" type="submit" ng-click="save()">{{mapOfFieldToValue['btn_Quick_Save']}}</button>
                    <button class="btn top-button" ng-show="addProdForm.$dirty || isEditing" ng-click="reset()">{{mapOfFieldToValue['btn_Reset']}}</button>
                   
              </div>
          <!-- End of top button row -->
                
            <div class="alert alert-danger fade in alert-div-customized" ng-show="statusMessageExists && statusMessage">
                <ul >
                  <li ng-repeat="status in statusMessage">
                    {{status}}
                  </li>
                </ul>
            </div>
            <div ng-if="addProdForm.submitted" class="alert alert-danger fade in alert-div-customized">
                <ul>
                  <li ng-if="carAppError">{{mapOfFieldToHelpTextOrError['Carrier_Application']}}</li> 
                  <li ng-if="emergingProdError">{{mapOfFieldToHelpTextOrError['Emerging_Application']}}</li> 
                  <li ng-if="negError">{{mapOfFieldToHelpTextOrError['negError']}}</li> 
                  <li ng-if="NAN">{{mapOfFieldToHelpTextOrError['NAN']}}</li> 
                  <li ng-if="addProdForm.oppCompetitor.$error.competitor">{{mapOfFieldToHelpTextOrError['Competitor_Primary']}}</li> 
                  <li ng-if="mrrNeg">{{mapOfFieldToHelpTextOrError['mrrNeg']}}</li>
                  <li ng-if="Unacceptable_Terms_and_Conditions">{{mapOfFieldToHelpTextOrError['Unacceptable_Terms_and_Conditions']}}</li> 
                  <li ng-if="Initial_Out_Clause_Description">{{mapOfFieldToHelpTextOrError['Initial_Out_Clause_Description']}}</li>
                  <li ng-if="Aggregation_Partner">{{mapOfFieldToHelpTextOrError['Aggregation_Partner']}}</li> 
                  <li ng-if="Consolidation_Account_Id">{{mapOfFieldToHelpTextOrError['Consolidation_Account_Id']}}</li> 
                  <li ng-if="Competitor">{{mapOfFieldToHelpTextOrError['Competitor']}}</li> 
                  <li ng-if="Missing_Product_Feature">{{mapOfFieldToHelpTextOrError['Missing_Product_Feature']}}</li> 
                  <li ng-if="requiredError">{{mapOfFieldToHelpTextOrError['Product_Name_Required']}}</li>
                  <li ng-if="addProdForm.churnPaperSelect.$error.required">{{mapOfFieldToHelpTextOrError['Churn_No_Paper']}}</li> 
                  <li ng-if="addProdForm.initialOutClause.$error.maxlength">{{mapOfFieldToHelpTextOrError['Field_Max_Length']}}</li>
                  <li ng-if="addProdForm.unacceptableTerms.$error.maxlength && !addProdForm.initialOutClause.$error.maxlength">{{mapOfFieldToHelpTextOrError['Field_Max_Length']}}</li>
                  
                </ul>
            </div>
            <form name="addProdForm" confirm-on-exit="x">
            <!--Start of Opportunity Detail Section -->
              <div class = "row detail-header"> 
                  Opportunity Details
              </div>
              <!--Forecasting Information Section -->
              <div id ="forecasting-info-section">
                  <div class = "row detail-sub-header"> 
                    <h5>Forecasting information</h5>
                  </div>
                  <div class = "row">
                      <table class="table" id="detail-section-table">
                      <!-- SFDC-1588 -->
                        <tr>
                            <td class="detail-section-field-label">MRR</td>
                            <td ng-mouseleave="unsetMode('MRR')" class = "detail-section-field-info" ng-class="{'negValue': isNeg(opp.MRR )}" ng-mouseover="setMode('MRR')">
                            {{opp.CurrencyCode}} {{opp.MRR | currency : "" : 2}} 
                            <span class = "text-right" ng-show="mapOfFieldToMode['MRR']">
                                <ng-include src="mapOfFieldToTemplate['MRR']" ></ng-include> 
                            </span>               
                            </td>
                           <td class="detail-section-field-label">Currency</td>
                            <td ng-mouseleave="unsetMode('Currency_Code')" class = "detail-section-field-info" ng-mouseover=
                            "setMode('Currency_Code')">{{opp.CurrencyCode}} 
                            <span ng-show="mapOfFieldToMode['Currency_Code']">
                                <ng-include src="mapOfFieldToTemplate['Currency_Code']" ></ng-include> 
                            </span> 
                            </td>
                            <!-- <td class="detail-section-field-label">Strategic MRR</td>
                            <td ng-mouseleave="unsetMode('Strategic_MRR')" class = "detail-section-field-info" ng-class="{'negValue': isNeg(opp.Strategic_MRR )}" ng-mouseover=
                            "setMode('Strategic_MRR')">{{opp.CurrencyCode}} {{opp.Strategic_MRR
                            | currency : "" : 2}} 
                           <span ng-show="mapOfFieldToMode['Strategic_MRR']">
                                <ng-include src="mapOfFieldToTemplate['Strategic_MRR']" ></ng-include> 
                            </span> 
                            </td> -->
                            
                        </tr>
                        <tr>
                             <td class="detail-section-field-label">EMRI</td>
                            <td ng-mouseleave="unsetMode('oppEmri')" class = "detail-section-field-info" ng-class="{'negValue': isNeg(opp.oppEmri )}" ng-mouseover=
                            "setMode('oppEmri')">{{opp.CurrencyCode}} {{opp.oppEmri | currency :
                            "" : 2}} 
                             <span ng-show="mapOfFieldToMode['oppEmri']">
                                <ng-include src="mapOfFieldToTemplate['oppEmri']" ></ng-include> 
                            </span> 
                            </td>
                            
                            <td class="detail-section-field-label">EMRI Comments</td>
                            <td ng-click="editing = true" ng-mouseleave="unsetMode('emriComments')" class = "detail-section-field-info" ng-mouseover=
                            "setMode('emriComments')">
                            <span ng-show="!editing" class="text-center">{{opp.emriComments}} </span>
                            <textarea class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.emriComments"/>
                             <span ng-show="mapOfFieldToMode['emriComments']">
                                <ng-include src="mapOfFieldToTemplate['emriComments']" ></ng-include> 
                            </span> 
                            </td>
                        </tr>
                        
                       <!--  <tr>
                            <td class="detail-section-field-label">EMRI Comments</td>
                            <td ng-click="editing = true" ng-mouseleave="unsetMode('emriComments')" class = "detail-section-field-info" ng-mouseover=
                            "setMode('emriComments')">
                            <span ng-show="!editing" class="text-center">{{opp.emriComments}} </span>
                            <textarea class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.emriComments"/>
                             <span ng-show="mapOfFieldToMode['emriComments']">
                                <ng-include src="mapOfFieldToTemplate['emriComments']" ></ng-include> 
                            </span> 
                            </td>
                            
                        </tr> -->
                        
                      </table>
                   </div>
              </div>
              <!--Forecasting Information Section -->
              <!--Cancellation/Loss Information Section -->
              <div id ="cancellation-loss-info-section">
                  <div class = "row detail-sub-header"> 
                    <h5>Cancellation And Loss Information</h5>
                  </div>
                  <div class = "row">
                      <table class="table" id="detail-section-table">
                        <tr>
                            <td class="detail-section-field-label">
                                <span ng-class="{'invalidfieldLabel': mrrNeg && !opp.Opportunity_Category && addProdForm.submitted}">
                                   Opportunity Category
                                </span>
                            </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Opportunity_Category')" ng-mouseleave = "unsetMode('Opportunity_Category')">
                                 <span ng-show="!editing && (mrrNeg && !opp.Opportunity_Category && addProdForm.submitted)" class="text-center invalidfield">{{opp.Opportunity_Category}}
                                 </span>
                                 <span ng-hide="editing || (mrrNeg && !opp.Opportunity_Category && addProdForm.submitted)" class="text-center">{{opp.Opportunity_Category}}
                                 </span>
                                 <select name="oppCat" ng-show="editing" ng-submit="editing = false"  id="categoryid" ng-model="opp.Opportunity_Category" ng-options="category as category for category in listofcategory | orderBy :category" ng-change="setOpportunitySubCategory()" custom-validate-mrr-opp="opp.Opportunity_Category"></select> 
                                 <span  ng-show = "mapOfFieldToMode['Opportunity_Category']">
                                    <ng-include src="mapOfFieldToTemplate['Opportunity_Category']" ></ng-include>                
                                  </span>
                              </td>

                               <td class="detail-section-field-label">
                                 New/Churn
                              </td>
                              <td class = "detail-section-field-info" ng-mouseover = "setMode('New_Churn')" ng-mouseleave = "unsetMode('New_Churn')">
                                 <span class="text-center">{{opp.New_Churn}}</span>
                                  <span  ng-show = "mapOfFieldToMode['New_Churn']">
                                    <ng-include src="mapOfFieldToTemplate['New_Churn']" ></ng-include>                
                                  </span>
                              </td>
                        </tr>
                        <tr>
                          <td class="detail-section-field-label">
                                <span class="invalidfieldLabel" ng-show="mrrNeg && !opp.Opportunity_Sub_Category && addProdForm.submitted">
                                  Opportunity Sub-Category
                                </span>
                                <span ng-hide="mrrNeg && !opp.Opportunity_Sub_Category && addProdForm.submitted">
                                  Opportunity Sub-Category
                                </span>
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Opportunity_Sub_Category')" ng-mouseleave = "unsetMode('Opportunity_Sub_Category')">
                                 <span ng-show="!editing && (mrrNeg && !opp.Opportunity_Sub_Category && addProdForm.submitted)" class="text-center invalidfield">{{opp.Opportunity_Sub_Category}} </span>
                                 <span ng-hide="editing || (mrrNeg && !opp.Opportunity_Sub_Category && addProdForm.submitted)" class="text-center">{{opp.Opportunity_Sub_Category}} </span>
                                 <select name="oppSubCat" ng-show="editing" ng-submit="editing = false"  id="subcategoryid" ng-model="opp.Opportunity_Sub_Category" ng-options="subcategory for subcategory in listofsubcategory" ng-change="setLossReason()" custom-validate-mrr-opp="opp.Opportunity_Sub_Category"></select> 
                                  <span  ng-show = "mapOfFieldToMode['Opportunity_Sub_Category']">
                                    <ng-include src="mapOfFieldToTemplate['Opportunity_Sub_Category']" ></ng-include>                
                                  </span>
                              </td>

                              <td class="detail-section-field-label">
                                <span class="invalidfieldLabel" ng-show="Aggregation_Partner && addProdForm.submitted">
                                  Aggregation Partner
                                </span>
                                <span ng-hide="Aggregation_Partner && addProdForm.submitted">
                                  Aggregation Partner
                                </span>
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Aggregation_Partner')" ng-mouseleave = "unsetMode('Aggregation_Partner')">
                                 <span ng-show="!editing && (Aggregation_Partner && addProdForm.submitted)" class="text-center invalidfield">{{opp.Aggregation_Partner}}</span>
                                 <span ng-hide="editing || (Aggregation_Partner && addProdForm.submitted)" class="text-center">{{opp.Aggregation_Partner}}</span>

                                 <select name="aggPartner" ng-show="editing"  id="aggPartnerSelect" ng-model="opp.Aggregation_Partner" ng-options="option for option in aggPartner" ng-change="addProdForm['oppLossReason'].$validate();"></select>

                                 <span  ng-show = "mapOfFieldToMode['Aggregation_Partner']">
                                    <ng-include src="mapOfFieldToTemplate['Aggregation_Partner']" ></ng-include>                
                                  </span>
                              </td>
                        </tr>

                        <tr>
                          <td class="detail-section-field-label">
                                <span class="invalidfieldLabel" ng-show="mrrNeg && !opp.Loss_Reason && addProdForm.submitted">
                                   Cancellation/Lost Reason 
                                </span>
                                <span ng-hide="mrrNeg && !opp.Loss_Reason && addProdForm.submitted">
                                   Cancellation/Lost Reason
                                </span>
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Loss_Reason')" ng-mouseleave = "unsetMode('Loss_Reason')">
                                 <span ng-show="!editing && (mrrNeg && !opp.Loss_Reason && addProdForm.submitted)" class="text-center invalidfield">{{opp.Loss_Reason}}</span>
                                 <span ng-hide="editing || (mrrNeg && !opp.Loss_Reason && addProdForm.submitted)" class="text-center">{{opp.Loss_Reason}}</span>
                                 <select name="oppLossReason" ng-show="editing" ng-submit="editing = false"  id="lossreasonid" ng-model="opp.Loss_Reason" ng-options="lossreason for lossreason in listoflossreason" custom-validate-mrr-opp="opp.Loss_Reason" custom-validate-loss-reason="opp.Loss_Reason"></select>
                                 <span  ng-show = "mapOfFieldToMode['Loss_Reason']">
                                    <ng-include src="mapOfFieldToTemplate['Loss_Reason']" ></ng-include>                
                                  </span>
                              </td>
                              <td class="detail-section-field-label">
                              
                                <span ng-class="{'invalidfieldLabel':(Unacceptable_Terms_and_Conditions || addProdForm.unacceptableTerms.$error.maxlength) && addProdForm.submitted}">
                                  Unacceptable Terms and Conditions
                                </span>
                               
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Unacceptable_Terms_and_Conditions')" ng-mouseleave = "unsetMode('Unacceptable_Terms_and_Conditions')">
                                 <span ng-show="!editing && (Unacceptable_Terms_and_Conditions && addProdForm.submitted)" class="text-center invalidfield">{{opp.Unacceptable_Terms_and_Conditions}}</span>
                                 <span ng-hide="editing || (Unacceptable_Terms_and_Conditions && addProdForm.submitted)" class="text-center">{{opp.Unacceptable_Terms_and_Conditions}}</span>
                                 <textarea name="unacceptableTerms" ng-show="editing" ng-submit="editing = false" ng-model="opp.Unacceptable_Terms_and_Conditions" ng-maxlength="100" class="resizable-textarea" ng-change="addProdForm['oppLossReason'].$validate(); addProdForm.$setDirty(); setProdFormSubmit();"/>
                                 <span  ng-show = "mapOfFieldToMode['Unacceptable_Terms_and_Conditions']">
                                    <ng-include src="mapOfFieldToTemplate['Unacceptable_Terms_and_Conditions']" ></ng-include>                
                                  </span>
                              </td>
                        </tr>
                        <tr>
                          <td class="detail-section-field-label">
                                <span class="invalidfieldLabel" ng-show="Missing_Product_Feature && addProdForm.submitted">
                                  Missing Product Feature
                                </span>
                                <span ng-hide="Missing_Product_Feature && addProdForm.submitted">
                                  Missing Product Feature
                                </span>
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Missing_Product_Feature')" ng-mouseleave = "unsetMode('Missing_Product_Feature')">
                                 <span ng-show="!editing && (Missing_Product_Feature && addProdForm.submitted)" class="text-center invalidfield">{{opp.Missing_Product_Feature}}</span>
                                 <span ng-hide="editing || (Missing_Product_Feature && addProdForm.submitted)" class="text-center">{{opp.Missing_Product_Feature}}</span>
                                 <textarea class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.Missing_Product_Feature" ng-change="addProdForm['oppLossReason'].$validate(); addProdForm.$setDirty();"/>
                                 <span  ng-show = "mapOfFieldToMode['Missing_Product_Feature']">
                                    <ng-include src="mapOfFieldToTemplate['Missing_Product_Feature']" ></ng-include>                
                                  </span>
                              </td>

                              <td class="detail-section-field-label">
                                <span ng-class="{'invalidfieldLabel':(Initial_Out_Clause_Description || addProdForm.initialOutClause.$error.maxlength) && addProdForm.submitted}">
                                  Initial Out Clause Description 
                                </span>
                              
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Initial_Out_Clause_Description')" ng-mouseleave = "unsetMode('Initial_Out_Clause_Description')">
                                 <span ng-show="!editing && (Initial_Out_Clause_Description && addProdForm.submitted)" class="text-center invalidfield">{{opp.Initial_Out_Clause_Description}}</span>
                                 <span ng-hide="editing || (Initial_Out_Clause_Description && addProdForm.submitted)" class="text-center">{{opp.Initial_Out_Clause_Description}}</span>
                                 <textarea name="initialOutClause" class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.Initial_Out_Clause_Description" ng-maxlength="100" ng-change="addProdForm['oppLossReason'].$validate(); addProdForm.$setDirty(); setProdFormSubmit();"/>
                                 <span  ng-show = "mapOfFieldToMode['Initial_Out_Clause_Description']">
                                    <ng-include src="mapOfFieldToTemplate['Initial_Out_Clause_Description']" ></ng-include>                
                                  </span>
                              </td>
                        </tr>
                        <tr>

                        <td class="detail-section-field-label">
                               <span class="invalidfieldLabel" ng-show="Consolidation_Account_Id && addProdForm.submitted">
                                  Consolidation Account 
                                </span>
                                <span ng-hide="Consolidation_Account_Id && addProdForm.submitted">
                                  Consolidation Account
                                </span>
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Consolidation_Account_Id')" ng-mouseleave = "unsetMode('Consolidation_Account_Id')">
                                  <span ng-show="!editing && (Consolidation_Account_Id && addProdForm.submitted)" class="text-left invalidfield"><a href="/{{opp.Consolidation_Account_Id}}" target= "_blank">{{opp.Consolidation_Account_Name}}</a></span>
                                  <span ng-hide="editing || (Consolidation_Account_Id && addProdForm.submitted)" class="text-left"><a href="/{{opp.Consolidation_Account_Id}}" target= "_blank">{{opp.Consolidation_Account_Name}}</a></span>
                                  
                                 <input name = "accountname" ng-show = "editing || !opp.Consolidation_Account_Name " type="text" ng-model="opp.Consolidation_Account_Name" class="text-left" ng-change="addProdForm['oppLossReason'].$validate();"  ng-minlength="3"/>

                                 <button class = "btn search-button" ng-click="searchAccount(opp.Consolidation_Account_Name) " data-target="#myModal" data-toggle="modal" ng-disabled = "addProdForm.accountname.$error.minlength || !opp.Consolidation_Account_Name"> <i class="fa fa-search" aria-hidden="true"></i> </button>

                                 <span  ng-show = "mapOfFieldToMode['Consolidation_Account_Id']">
                                    <ng-include src="mapOfFieldToTemplate['Consolidation_Account_Id']" ></ng-include>                
                                  </span>

                                   <div role="alert">
                                      <span class="error" ng-show="addProdForm.accountname.$error.minlength">
                                        Please enter at least 3 characters!</span>
                                    </div>
   
                                    <div class="modal fade" id="myModal" role="dialog">
                                      <div class="modal-dialog account-search-dialog">
                                        <div class="modal-content">
                                          <div class="modal-header">
                                            <button class="close" data-dismiss="modal" type="button">&times;</button>
                                            <h4 class="modal-title">Search Results</h4>
                                          </div>
                                          <div class="modal-body accountsearch-modal-body">
                                             
                                             <div id="loading-in-table">
                                                <img id="loading-image" alt="Loading..." src="{!URLFOR($Resource.EMRIAddProduct,'EMRIAddProduct/images/loading_gears.gif')}"/>
                                             </div>
                                              <div ng-show = "!accountdetails">
                                                 No accounts found!
                                              </div>
                                              <table ng-show = "accountdetails" class="table header-fixed">
                                                <thead>
                                                  <tr>
                                                    <th width="12%">Account Name</th>
                                                    <th width="15%">Account Owner Alias</th>
                                                    <th width="9%">Type</th>
                                                    <th width="12%">Support Level</th>
                                                    <th width="15%">Billing State/Province</th>
                                                    <th width="12%">Billing Country</th>
                                                    <th width="12%">Vertical</th>
                                                    <th width="12%">AKAM Account ID</th>
                                                  </tr>
                                                </thead>
                                                <tbody>
                                                  <tr ng-repeat = "accitem in accountdetails">
                                                     <td width="12%"><a href="#" data-ng-click="setSelectedAccount(accitem.accountId,accitem.accountName)" data-dismiss="modal"><span ng-bind-html="accitem.accountName"></span></a></td>
                                                    <td width="15%" ng-bind-html = "accitem.ownerAlias"></td>
                                                    <td width="9%" ng-bind-html = "accitem.accountType" ></td>
                                                    <td width="12%" ng-bind-html = "accitem.supportLevel"></td>
                                                    <td width="15%" ng-bind-html = "accitem.billingState"></td>
                                                    <td width="12%" ng-bind-html = "accitem.billingCountry"></td>
                                                    <td width="12%" ng-bind-html = "accitem.vertical"></td>
                                                    <td width="12%" ng-bind-html = "accitem.akamAccountId"></td>
                                                  </tr>
                                                </tbody>
                                              </table>
                                          </div>
                                          
                                     
                                        </div>
                                        
                                      </div>
                                    </div>

                         
                              </td>


                               <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="(addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted">
                                Competitor
                              </span>
                              <span ng-hide="(addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted">
                                Competitor
                              </span>
                                 
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Competitor')" ng-mouseleave = "unsetMode('Competitor')">
                                 <span ng-show="!editing && ((addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted)" class="text-center invalidfield">{{opp.Competitor}}</span>
                                 <span ng-hide="editing || ((addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted)" class="text-center">{{opp.Competitor}}</span>
                                 <select name="oppCompetitor" ng-show="editing"  id="CompetitorSelect" ng-model="opp.Competitor" ng-options="option for option in competitor" custom-validate-competitor-opp="opp.Competitor" ng-change="addProdForm['oppLossReason'].$validate();">
                                 </select>

                                  <span  ng-show = "mapOfFieldToMode['Competitor']">
                                    <ng-include src="mapOfFieldToTemplate['Competitor']" ></ng-include>                
                                  </span>
                              </td>
                        </tr>
                        <tr>
                          <td class="detail-section-field-label">
                                <span ng-class="{'invalidfieldLabel': addProdForm.churnPaperSelect.$error.required && addProdForm.submitted}">
                                 Contract Ended - No Paper
                                </span>
                               
                              </td> 
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Churn_No_Paper')" ng-mouseleave = "unsetMode('Churn_No_Paper')">
                                 <span ng-show="addProdForm.churnPaperSelect.$error.required && addProdForm.submitted && !editing" class="text-center invalidfield">{{opp.Churn_No_Paper}}</span>
                                 <span ng-hide="editing || (addProdForm.churnPaperSelect.$error.required && addProdForm.submitted)" class="text-center">{{opp.Churn_No_Paper}}</span>
                                 <select name="churnPaperSelect" ng-show="editing"  id="churnPaperSelect" ng-model="opp.Churn_No_Paper" ng-options="o.value as o.label for o in churnOptions" ng-required="noPaperMandate" ng-change="reValidate()"></select>
                                 <span  ng-show = "mapOfFieldToMode['Churn_No_Paper']">
                                    <ng-include src="mapOfFieldToTemplate['Churn_No_Paper']" ></ng-include>                
                                  </span>
                              </td>
                        </tr>
                      </table>
                   </div>
              </div>
              <!--Cancellation/Loss Information Section -->
               <!--Additional Information Section -->
              <div id ="additional-info-section">
                  <div class = "row detail-sub-header"> 
                    <h5>Additional information</h5>
                  </div>
                  <div class = "row">
                      <table class="table" id="detail-section-table">
                        <tr>
                          <td class="detail-section-field-label">
                                <span class="invalidfieldLabel" ng-show="emergingProdError && addProdForm.submitted">
                                 Emerging Application
                                </span>
                                <span  ng-hide="emergingProdError && addProdForm.submitted">
                                 Emerging Application
                                </span>
                              </td> 
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Emerging_Application')" ng-mouseleave = "unsetMode('Emerging_Application')">
                                 <span ng-show="emergingProdError && addProdForm.submitted && !editing" class="text-center invalidfield">{{opp.Emerging_Application}}</span>
                                 <span ng-hide="editing || (emergingProdError && addProdForm.submitted)" class="text-center">{{opp.Emerging_Application}}</span>
                                 <select name="emergingApp" ng-show="editing"  id="emergingAppSelect" ng-model="opp.Emerging_Application" ng-options="option for option in emergingApp" ng-change="reValidate()"></select>
                                 <span  ng-show = "mapOfFieldToMode['Emerging_Application']">
                                    <ng-include src="mapOfFieldToTemplate['Emerging_Application']" ></ng-include>                
                                  </span>
                              </td>
                              <td class="detail-section-field-label" ng-show="carAppError && addProdForm.submitted">
                                <span class="invalidfieldLabel">
                                 Carrier Application
                                 </span>
                              </td>
                              <td class="detail-section-field-label" ng-hide="carAppError && addProdForm.submitted">
                                <span>
                                 Carrier Application
                                 </span>
                              </td>
                              <td ng-click="editing = true" class = "detail-section-field-info" ng-mouseover = "setMode('Carrier_Application')" ng-mouseleave = "unsetMode('Carrier_Application')">
                                 <span class="text-center invalidfield" ng-show="carAppError && addProdForm.submitted && !editing">{{opp.CarrierApplication}}</span>
                                 <span ng-hide="editing || (carAppError && addProdForm.submitted)" class="text-center">{{opp.CarrierApplication}}</span>
                                 <select name="carrierApp"  multiple="true" ng-show="editing"  id="carrierAppSelect" ng-model="selectedValues" ng-options="option for option in carrierApp" ng-change="reValidate()"></select>
                                  <span  ng-show = "mapOfFieldToMode['Carrier_Application']">
                                    <ng-include src="mapOfFieldToTemplate['Carrier_Application']" ></ng-include>                
                                  </span>
                              </td>    
                        </tr>
                        
                      </table>
                   </div>
                   <!--Additional Information Section -->
              </div>
              <!--End of of Opportunity Detail Section -->

              <!--Start of Opportunity Product Section -->
              <div class = "row detail-header"> 
                  Products Details
              </div>

              <!--Product Info Button Section -->
              <div class = "row text-center product-info-button-row clearfix" >
                  <button class="btn product-info-button" ng-click="addProd()" ng-disabled="freeze" ng-show="addRow">{{mapOfFieldToValue['btn_Add_Product']}}</button>
                  
                  <button class="btn product-info-button" ng-show="showUndo" ng-click="undo()">{{mapOfFieldToValue['btn_Undo']}}</button>   
                  <!-- SFDC-1290 -->
                  <button class="btn top-button" ng-show="addProdForm.$dirty || isEditing" type="submit" ng-click="save()">{{mapOfFieldToValue['btn_Quick_Save']}}</button>
                  <a ng-href="{{linkToFAQ}}" class="btn-link text-right pull-right text-warning" target="_blank">
                        <strong><u> Help &amp; Training </u></strong>
                    </a>
              </div>
              <!-- SFDC-1290 -->
              <div class="modal fade" id="noContractChangeMessageModal" role="dialog">
                    <div class="modal-dialog">
<!--  account-search-dialog -->
                         <div class="modal-content">
                                <div class="modal-header">
                                    <button class="close" data-dismiss="modal" type="button">&times;</button>
                                       <h4 class="modal-title">Confirm</h4>
                                </div>
                                <div class="modal-body">
                                      <p>{{mapOfFieldToHelpTextOrError['No_Contract_Changes_Warning_Message']}}</p>
                                </div>
                               <div class="modal-footer">
                                  <button type="button" class="btn btn-default" data-ng-click="resetFactory()" data-dismiss="modal">Yes</button>

                                  <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                               </div>
                                          <!-- accountsearch-modal-body -->
                                          
                            </div>
                      </div>
                </div>
              <!--Product Info Button Section -->

              <!--Product Info Table Section -->
            <div class=" row">
               <table class="table table-responsive table-bordered table-condensed" id="lineItemTable">
                  <tr>
                     <td></td>
                     <td></td>
                     <th >{{mapOfFieldToValue['Product_Name']}}</th>
                
                     <th >{{mapOfFieldToValue['One_Time_Fee_2_0']}}
                     <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['One_Time_Fee_2_0']}}"></i></th>
                     <th >{{mapOfFieldToValue['Net_MRR_2_0']}}
                   
                     <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['Net_MRR_2_0']}}"></i>
                    
                     </th>
                    
                     <th >{{mapOfFieldToValue['EMRI_2_0']}}
                     <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['EMRI_2_0']}}"></i></th>
                </tr>
                  
                  <tr ng-repeat="oli in lineItems | orderBy: [existing,'productName']" item="lineItems" columns="columns" ng-disabled="freeze" ng-class="{'existing': rowExisting}">
                     <td ng-hide="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit)">
                  
                     </td>
                     <td ng-show="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit)">
                         <button class="btn btn-danger" mwl-confirm="x" title="Delete" message="Are you sure you want to delete this product?" confirm-text="Yes" cancel-text="No" placement="right" on-confirm="!freeze && delete(oli, 0)" on-cancel="console.log(1)" confirm-button-type="danger" cancel-button-type="default"  ng-click="console.log(false)"><i class="fa fa-trash"></i></button>
                     </td>
                     <td ng-hide="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit) || oli.undoLink"><a href="#" ng-click="!freeze && modify($index,0,oli)">Edit</a></td>
                     <td ng-show="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit) && !oli.undoLink"><a href="#" ng-click="!freeze && modify($index,1,oli)">Edit</a></td>
                     <td ng-show="oli.undoLink"><a href="#" ng-click="!freeze && undoLineItem(oli,$index)">Undo</a></td>
                     <td class="noneditcolor">{{oli.productName}}</td> 
                  
                     <td class = "text-right" ng-hide="editingData[$index] && !freeze">{{oli.projOneTimeFee | currency : "" : 2}}</td>
                     <td ng-show="editingData[$index] && !freeze">
                         <input type="number" name="projOneTimeFee{{$index}}" min="0" step="any" ng-model="oli.projOneTimeFee"/>
                         <div ng-messages="addProdForm['projOneTimeFee'+$index].$error">
                            <div ng-message="min" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['negError']}}</div>
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                        </div>
                     </td>
                     <!-- Projected commit ≈ MRR  -->

                     <td class = "text-right" ng-hide="editingData[$index]  && !freeze">
                     {{oli.netMRR | currency : "" : 2}} </td>
                     <td ng-show="editingData[$index] && !freeze">
                         <input type="number" name="netMRR{{$index}}"  step="any" ng-model="oli.netMRR"/>

                         <!-- SFDC-1288 -->
                         {{netMRR(oli,lineItems,0)}}
                          <div ng-messages="addProdForm['netMRR'+$index].$error">
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                          </div> 
                     </td>
                     <!-- evaluate netMRR -->

                     <td class = "text-right" ng-hide="editingData[$index]  && !freeze">{{oli.emri | currency : "" : 2}}</td>
                     <td ng-show="editingData[$index] && !freeze">
                         <input type="number" name="emri{{$index}}"  step="any" ng-model="oli.emri"/>
                         <!-- SFDC-1288 -->
                         {{netEMRI(oli,lineItems,0)}}
                          <div ng-messages="addProdForm['emri'+$index].$error">
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                          </div> 
                     </td>
                     
                  
                  </tr>
                  
                  
                  <tr ng-show="showRow" ng-repeat="oli in addedLineItems">
                      <td >
                          <button class="btn btn-danger" mwl-confirm="x" title="Delete" message="Are you sure you want to delete this product?" confirm-text="Yes" cancel-text="Cancel" placement="right" on-confirm="delete(oli, 1)" on-cancel="console.log(1)" confirm-button-type="danger" cancel-button-type="default"  ng-click="console.log(false)"><i class="fa fa-trash"></i></button>
                      </td>
                    <td/>
                    <td>
                    
                         <select name="prodNameSelect{{$index}}" id="prodNameSelect" ng-model="oli.productName" ng-options="option.PricebookEntries.records[0].Id as option.Name for option in prod" custom-validate="oli.productName" ng-required="true">
                         </select>
                    </td>
                     
                     <td>
                         <input type="number" name="projOneTimeFeeAdd{{$index}}" min="0" step="any" ng-model="oli.projOneTimeFee"/>
                         <div ng-messages="addProdForm['projOneTimeFeeAdd'+$index].$error">
                            <div ng-message="min" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['negError']}}</div>
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                        </div>
                     </td>
                     <!-- <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.netMRR )}"> -->
                     <td>
                         <!-- <span> {{netMRR(oli,addedLineItems,1) | currency : "" : 2}}</span> -->
                 
                         <input type="number" name="netMRRAdd{{$index}}" step="any" ng-model="oli.netMRR"/>
                         {{netMRR(oli,addedLineItems,1)}}
                         <div ng-messages="addProdForm['netMRRAdd'+$index].$error">
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                        </div>
                     </td>
                     
                    
                     <td>
                         <!-- <span> {{netMRR(oli,addedLineItems,1) | currency : "" : 2}}</span> -->
                 
                         <input type="number" name="emriAdd{{$index}}" step="any" ng-model="oli.emri"/>
                         {{netEMRI(oli,addedLineItems,1)}}
                         <div ng-messages="addProdForm['emriAdd'+$index].$error">
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                        </div>
                     </td>
                     
                    
                  </tr>
                  <tr>
                  </tr>
                  <tr><td colspan="11"></td></tr>
                  <tr class ="total-row">
                    
                    <td colspan="4">
                        Total
                    </td>
                    
                    <td class ="text-right" ng-class="{'negValue': isNeg(mrrTotal)}">
                        {{calculateTotal()}} {{opp.CurrencyCode}} {{mrrTotal | currency : "" : 2}}
                    </td>
                 
                    <td class ="text-right" ng-class="{'negValue': isNeg(opp.emriTotal)}"> 
                        {{opp.CurrencyCode}} {{opp.emriTotal | currency : "" : 2}}
                    </td>
                  </tr>
               </table>
              <!--Product Info Table Section -->
            </div>
          <!--End of Opportunity Product Section -->

 
            </form>
         </div>
         <script language="javascript" type="text/javascript">   
              document.getElementById('loading').style.visibility='hidden';
              document.getElementById('loading-in-table').style.visibility='hidden';



         </script>
     </div>
      </body>

      <!-- To do: sonali - why id has .html -->
      <script type="text/ng-template" id="penciltemplate.html">
              <i class="fa fa-pencil" aria-hidden="true"></i>
       </script>
       <script type="text/ng-template" id="locktemplate.html">
              <i class="fa fa-lock" aria-hidden="true"></i>
       </script>
   </html>
</apex:page>