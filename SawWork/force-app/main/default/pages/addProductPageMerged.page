<!-- Author: Ruchika Sharma
    Version: 1.0
    Created date: 01/08/2016
    SFDC-1103: EMRI - New Product Wizard
-->
<apex:page standardStylesheets="false" showHeader="false" sidebar="2" applyHtmlTag="false" applyBodyTag="false" standardController="Opportunity"
   cache="true" extensions="addProductPageControllerMerged">
   <html xmlns:ng="http://angularjs.org" ng-app="addProdOpptyApp" lang="en">

   <head>
      <meta charset="utf-8" />
      <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>{!Opportunity.Name} | Manage Products</title>
      <!-- TODO: Check the effects and remove inclusion not needed-->


      <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/jquery.min.js')}" />
      <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/bootstrap.min.js')}" />
      <apex:stylesheet value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/css/bootstrap.min.css')}" />
      <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/angular.min.js')}" />
      <!-- <apex:includeScript value="{!URLFOR($Resource.Angular_JS, 'js/xeditable.min.js')}"/> -->
      <!-- <apex:includeScript value="{!$Resource.btn_addPlusSign}" /> -->
      <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/angular-sanitize.min.js')}" />
      <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/ui-bootstrap-tpls.min.js')}" />
      <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/js/angular-bootstrap-confirm.min.js')}" />
      <apex:includeScript value="{!URLFOR($Resource.EMRIAddProduct , 'EMRIAddProduct/js/angular-messages.min.js')}" />
      <apex:stylesheet value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/css/font-awesome.min.css')}" />
      <apex:stylesheet value="{!URLFOR($Resource.EMRIAddProduct, 'EMRIAddProduct/css/style.css')}" />
      <script src="/soap/ajax/32.0/connection.js" type="text/javascript"></script>
      <script src="/soap/ajax/32.0/apex.js" type="text/javascript"></script>
      <script type="text/javascript">
         var __sfdcSessionId = '{!GETSESSIONID()}';
         sforce.connection.sessionId = "{!$Api.Session_ID}";
         var app = angular.module("addProdOpptyApp", ['mwl.confirm', 'ngMessages', 'ngSanitize']);
         // 'ui.bootstrap','ngSanitize' ["xeditable"]

         app.controller("addProdController", ['$scope', '$templateCache', '$http', '$rootScope', '$window', function ($scope, $templateCache, $http, $rootScope, $window) {

            // variables declaration and Initialization
            var timezoneoffset = (new Date()).getTimezoneOffset();
            $scope.opp = {!OpptyJson         
};
         if (timezoneoffset > 0) {
            var correctedDate = new Date($scope.opp.CloseDate);
            correctedDate = new Date(correctedDate.getUTCFullYear(), correctedDate.getUTCMonth(), correctedDate.getUTCDate());
            $scope.opp.CloseDate = correctedDate;
         } else {
            $scope.opp.CloseDate = new Date($scope.opp.CloseDate);
         }

         $scope.totalMRR = $scope.opp.MRR;
         $scope.totalEMRI = $scope.opp.oppEmri;
         $scope.oppType = $scope.opp.Opportunity_Type;
         $scope.zfStatus = $scope.opp.Zoff_Status; // Rajesh:- #SFDC-7061 -|- intial value set
         $scope.zfoptOutreason = $scope.opp.Zoff_Opt_Out_Reason; // / Rajesh #SFDC-7061 -|- intial value set

         $scope.originalLineItems = {!OliRecords};
         $scope.lineItems = {!OliRecords};
         $scope.addedLineItems = {!addedLineItems};

         angular.forEach($scope.originalLineItems, function (value, index) {
            if (timezoneoffset > 0) {
               var correctedDate = new Date($scope.originalLineItems[index].SpCloseDate);
               correctedDate = new Date(correctedDate.getUTCFullYear(), correctedDate.getUTCMonth(), correctedDate.getUTCDate());
               $scope.originalLineItems[index].SpCloseDate = correctedDate;
            } else {
               $scope.originalLineItems[index].SpCloseDate = new Date($scope.originalLineItems[index].SpCloseDate);
            }
         });

         angular.forEach($scope.lineItems, function (value, index) {
            if (timezoneoffset > 0) {
               var correctedDate = new Date($scope.lineItems[index].SpCloseDate);
               correctedDate = new Date(correctedDate.getUTCFullYear(), correctedDate.getUTCMonth(), correctedDate.getUTCDate());
               $scope.lineItems[index].SpCloseDate = correctedDate;
            } else {
               $scope.lineItems[index].SpCloseDate = new Date($scope.lineItems[index].SpCloseDate);
            }
         });

         angular.forEach($scope.addedLineItems, function (value, index) {
            if (timezoneoffset > 0) {
               var correctedDate = new Date($scope.addedLineItems[index].SpCloseDate);
               correctedDate = new Date(correctedDate.getUTCFullYear(), correctedDate.getUTCMonth(), correctedDate.getUTCDate());
               $scope.addedLineItems[index].SpCloseDate = correctedDate;
            } else {
               $scope.addedLineItems[index].SpCloseDate = new Date($scope.addedLineItems[index].SpCloseDate);
            }
         });

         $scope.competitor = {!competitor};
         $scope.carrierApp = {!carrierApp};
         $scope.aggPartner = {!aggPartner};
         $scope.addRow = true;
         $scope.statusMessageExists = false;
         $scope.showUndo = false;
         $scope.freeze = false;
         $scope.collapse = false;
         $scope.addError = false;
         $scope.carAppError = false;
         $scope.opReason = false;//Rajesh - SFDC-7061
         $scope.negError = false;
         $scope.NAN = false;
         $scope.mrrNeg = false;
         $scope.additionalLossDetailErr = false;
         $scope.fromChurn = false;
         $scope.Unacceptable_Terms_and_Conditions = false;
         $scope.Initial_Out_Clause_Description = false;
         $scope.Aggregation_Partner = false;
         $scope.Consolidation_Account_Id = false;
         $scope.Competitor = false;
         $scope.Missing_Product_Feature = false;
         $scope.requiredError = false;
         $scope.profile = {!Profile};
         console.log('$scope.profile:');
         console.log($scope.profile);
         $scope.editingData = {};
         $scope.originalLineItem = {};
         $scope.modifiedLineItemIndex = [];
         $scope.originalLineItemIndex = [];
         $scope.isEditing = false;
         $scope.isMrrNegLineItem = false;
         $scope.noPaperMandate = false;
         $scope.commitChanged = false;
         $scope.usageChanged = false;
         $scope.rowExisting = false;
         $scope.fromResetFactory = false;
         $scope.oliIndex;
         $scope.Churn_No_Paper_List = {}
         $scope.termErrorflag = false;
         $scope.termIsRequired = false;
         $scope.opptycategorytolossreason = {!OpportunityCategoryToLossReasonMap};
         $scope.prod = {!Products};
         $scope.otherCompetitorSelected = false;

         $scope.selectedValues = [];
         $scope.mapOfFieldToHelpTextOrError = {!FieldsToHelpText};
         $scope.setSaveReturn = false;
         $scope.mapOfFieldToValue = {!FieldsToValue};
         //SFDC-6398
         $scope.opportunityType = {!opportunityType};
         $scope.zoffStatus = {!zoffStatus}; //Rajesh #SFDC-7061 -|- Picklist value set
         $scope.autoRenewCheck = {!autoRenewCheck};
         $scope.addproductDisabled = false;
         //SFDC-3534
         $scope.oliForecastCat = {!oliForecastCat};
         $scope.isAllowedSpecialistEdit = {!isUserAllowedForSpecialistEdit};
         $scope.churnOptions = [
            { value: '', label: 'Choose a value' },
            { value: 'Yes', label: 'Yes' },
            { value: 'No', label: 'No' },
         ];

         if ($scope.opp.CarrierApplication != null && $scope.opp.CarrierApplication != undefined)
            angular.forEach($scope.opp.CarrierApplication.split(';'), function (val) {
               $scope.selectedValues.push(val);
            });

         //3441
         var profile = '{!JSENCODE($Profile.Name)}';
         if (profile.includes("Sales - Carrier")) {
            $scope.termIsRequired = true;
         }

         // initialise list of opportunity category, sub category and loss reason
         $scope.listofcategory = [];
         //SFDC-1290
         $scope.linkToFAQ = {!linkToFAQ};
         angular.forEach($scope.opptycategorytolossreason, function (value, key) {
            $scope.listofcategory.push(key);

         });

         $scope.idToTrafficMap = {};
         angular.forEach($scope.prod, function (item) {
            $scope.idToTrafficMap[item.PricebookEntries.records[0].Id] = item.Traffic_Based__c;
         });
         // $scope.listofsubcategory = $scope.opptycategorytosubcategory[$scope.opp.Opportunity_Category];

         // SFDC-3256 - Agility2.0 - Updating Loss reasons, Removing Subcategory, Unacceptable, Initial Out and Missing product feature fields
         $scope.listoflossreason = $scope.opptycategorytolossreason[$scope.opp.Opportunity_Category];

         $scope.mapOfFieldToTemplate = {!FieldsToTheirEditMode};
         $scope.mapOfFieldToMode = [];

         angular.forEach($scope.mapOfFieldToTemplate, function (value, key) {
            $scope.mapOfFieldToMode[key] = false;
         });

         for (var i = 0, length = $scope.lineItems.length; i < length; i++) {
            $scope.editingData[i] = false;
         }

         // Methods to support UI functionalities

         $scope.setMode = function (field) {
            $scope.mapOfFieldToMode[field] = true;
            // console.log('Im here' + field + $scope.mapOfFieldToMode[field]);
         };

         $scope.unsetMode = function (field) {
            $scope.mapOfFieldToMode[field] = false;
         };

         // Function get called on click of Add Product button
         $scope.addProd = function () {
            $scope.singleLineItem = {!OliRecord         
};

         /*SFDC-6398 SFDC-7597
         var disableAddProduct = $scope.opp.Opportunity_Type == 'Auto-Renewal' && $scope.opp.autoRenewCheck;
         if (disableAddProduct) {
            $scope.addproductDisabled = true;
            return;
         }
         $scope.addproductDisabled = false;*/


         $scope.addedLineItems.push($scope.singleLineItem);
         $scope.showRow = true;
         $scope.prodAddedOrDeleted = true;
            
                   };

         // Function get called on click of delete link
         $scope.delete = function (item, intVar) {
            if (intVar == 1) {
               console.log('before splicing 1');
               console.log($scope.addedLineItems);
               $scope.addedLineItems.splice($scope.addedLineItems.indexOf(item), 1);
               console.log('after splicing 1');
               console.log($scope.addedLineItems);
            }
            else if (intVar == 0) {
               console.log('before splicing 2');
               console.log($scope.lineItems);
               $scope.lineItems.splice($scope.lineItems.indexOf(item), 1);
               console.log('after splicing 2');
               console.log($scope.lineItems);
               $scope.prodAddedOrDeleted = true;

            }
            $scope.isEditing = true;
         };


         // Function get called on click of edit link
         $scope.modify = function (index, existingNew, oli) {


            /*SFDC-6398 SFDC-7597
            var disableAddProduct = $scope.opp.Opportunity_Type == 'Auto-Renewal' && $scope.opp.autoRenewCheck;
            if (disableAddProduct) {
               $scope.addproductDisabled = true;
               return;
            }
            $scope.addproductDisabled = false;*/



            var index1 = $scope.lineItems.indexOf(oli);
            $scope.modifiedLineItemIndex[$scope.modifiedLineItemIndex.length] = index1;

            console.log('modify');

            console.log(index1);
            $scope.originalLineItem[index] = angular.copy(oli);
            $scope.originalLineItemIndex[$scope.originalLineItemIndex.length] = index;
            $scope.editingData[index] = true;
            if (existingNew == 1)
               $scope.onlyNewEdit = true;
            oli.undoLink = true;

         };


         $scope.update = function (index) {
            $scope.editingData[index] = false;
         };

         // Function get called on click of undo link
         $scope.undoLineItem = function (oli, index) {
            var indexNew = $scope.lineItems.indexOf(oli);
            $scope.lineItems[indexNew] = $scope.originalLineItem[index];
            $scope.editingData[index] = false;
         };

         // Function to identify if the line item is existing (coming from contract) or new
         $scope.isDelete = function (curMonthlyCommitFee, curAvgRevNonCommit) {

            if ((angular.isUndefined(curMonthlyCommitFee) || curMonthlyCommitFee === null) && (angular.isUndefined(curAvgRevNonCommit) || curAvgRevNonCommit === null)) {
               $scope.rowExisting = false;
               return true;
            }
            else {
               $scope.rowExisting = true;
               return false;
            }
         };


         // Function returns string based on if the line item is existing (coming from contract) or new
         $scope.existing = function (oli) {
            // console.log('calling existing');
            // console.log(oli);
            if ($scope.isDelete(oli.curMonthlyCommitFee, oli.curAvgRevNonCommit))
               return 'non existing';
            else
               return 'existing';
         }

         // Function get called on click of cancel link
         $scope.cancel = function (item, indexLine) {
            /*SFDC-6398 SFDC-7597
            var disableAddProduct = $scope.opp.Opportunity_Type == 'Auto-Renewal' && $scope.opp.autoRenewCheck;
            if (disableAddProduct) {
               $scope.addproductDisabled = true;
               return;
            }
            $scope.addproductDisabled = false;*/
            // console.log($scope.lineItems[index]);
            var index = $scope.lineItems.indexOf(item);
            $scope.modifiedLineItemIndex[$scope.modifiedLineItemIndex.length] = index;
            $scope.originalLineItemIndex[$scope.originalLineItemIndex.length] = indexLine;
            $scope.originalLineItem[indexLine] = angular.copy(item);
            $scope.lineItems[index].projMonthlyCommitFee = 0;
            $scope.lineItems[index].projOneTimeFee = 0;
            $scope.lineItems[index].projAvgRevNonCommit = 0;
            if ($scope.lineItems[index].curMonthlyCommitFee != null && $scope.lineItems[index].curMonthlyCommitFee != undefined && $scope.lineItems[index].curMonthlyCommitFee != '')
               $scope.lineItems[index].netMRR = $scope.lineItems[index].projMonthlyCommitFee - $scope.lineItems[index].curMonthlyCommitFee;
            else
               $scope.lineItems[index].netMRR = $scope.lineItems[index].projMonthlyCommitFee;
            $scope.isEditing = true;
            $scope.lineItems[index].undoLink = true;
         };

         // Function to calculate net MRR
         $scope.netMRR = function (item, arr, intVar) {
            // if($scope.editingData[index]){
            var index = arr.indexOf(item);

            if (item.curMonthlyCommitFee != null && item.curMonthlyCommitFee != undefined && item.curMonthlyCommitFee != '')
               value = item.projMonthlyCommitFee - item.curMonthlyCommitFee;
            else
               value = item.projMonthlyCommitFee
            if (intVar == 1)
               $scope.addedLineItems[index].netMRR = value;
            else
               $scope.lineItems[index].netMRR = value;

            return value;
            // }     
         };

         // Function to calculate net Non commit
         $scope.netNonCommit = function (item, arr, intVar) {
            var index = arr.indexOf(item);
            if (item.curAvgRevNonCommit != null && item.curAvgRevNonCommit != undefined && item.curAvgRevNonCommit != '')
               value = item.projAvgRevNonCommit - item.curAvgRevNonCommit;
            else
               value = item.projAvgRevNonCommit
            if (intVar == 1)
               $scope.addedLineItems[index].netNonCommit = value;
            else
               $scope.lineItems[index].netNonCommit = value;
            return value;
         };

         // Function to calculate net Emri
         $scope.netEMRI = function (item, arr, intVar) {
            var index = arr.indexOf(item);
            value = $scope.netMRR(item, arr, intVar) + $scope.netNonCommit(item, arr, intVar);
            if (intVar == 1)
               $scope.addedLineItems[index].emri = value;
            // $scope.addedLineItems[index].netMRR+$scope.addedLineItems[index].netNonCommit;
            else
               $scope.lineItems[index].emri = value;
            // $scope.lineItems[index].netMRR+$scope.lineItems[index].netNonCommit;

            return value;
         };
         //SFDC-3534
         // Function to calculate specialistCommit
         $scope.specialistCommit = function (item, arr, intVar) {
            var index = arr.indexOf(item);
            console.log('index in specialistCommit');
            console.log(index);
            console.log(i);
            if (!item.SpCommitTouched) {
               if (intVar == 1)
                  item.SpCommitTouched = $scope.addProdForm['spProjMonthlyCommitFeeAdd' + index].$dirty
               else
                  item.SpCommitTouched = $scope.addProdForm['spProjMonthlyCommitFee' + index].$dirty
            }
            if (intVar == 1) {
               value = $scope.addedLineItems[index].spProjMonthlyCommitFee;
            }
            else {
               value = $scope.lineItems[index].spProjMonthlyCommitFee;
            }
            if (!item.SpCommitTouched) {
               value = item.projMonthlyCommitFee;
            }
            console.log('SpCommitTouched');
            console.log(item.SpCommitTouched);

            if (intVar == 1 && $scope.addedLineItems[index] != 'undefined')
               $scope.addedLineItems[index].spProjMonthlyCommitFee = value;
            else
               $scope.lineItems[index].spProjMonthlyCommitFee = value;



            return value;
         };
         $scope.specialistOneTimeFee = function (item, arr, intVar) {
            var index = arr.indexOf(item);
            console.log('index in specialistOneTimeFee');
            console.log(index);
            console.log(i);
            if (!item.SpOneTimeFeeTouched) {
               if (intVar == 1)
                  item.SpOneTimeFeeTouched = $scope.addProdForm['spOneTimeFeeAdd' + index].$dirty
               else
                  item.SpOneTimeFeeTouched = $scope.addProdForm['spOneTimeFee' + index].$dirty
            }
            if (intVar == 1) {
               value = $scope.addedLineItems[index].spOneTimeFee;
            }
            else {
               value = $scope.lineItems[index].spOneTimeFee;
            }
            if (!item.SpOneTimeFeeTouched) {
               value = item.projOneTimeFee;
            }
            console.log('SpOneTimeFeeTouched');
            console.log(item.SpOneTimeFeeTouched);

            if (intVar == 1 && $scope.addedLineItems[index] != 'undefined')
               $scope.addedLineItems[index].spOneTimeFee = value;
            else
               $scope.lineItems[index].spOneTimeFee = value;



            return value;
         };
         $scope.specialistUsage = function (item, arr, intVar) {
            var index = arr.indexOf(item);
            if (!item.SpUsageTouched) {
               if (intVar == 1)
                  item.SpUsageTouched = $scope.addProdForm['spProjMonthlyUsageAdd' + index].$dirty;
               else
                  item.SpUsageTouched = $scope.addProdForm['spProjMonthlyUsage' + index].$dirty;
            }
            console.log('SpUsageTouched');
            console.log(item.SpUsageTouched);

            if (intVar == 1) {
               value = $scope.addedLineItems[index].spProjMonthlyUsage;
            }
            else {
               value = $scope.lineItems[index].spProjMonthlyUsage;
            }
            if (!item.SpUsageTouched)
               value = item.projAvgRevNonCommit;
            else
               value = item.spProjMonthlyUsage;
            if (intVar == 1 && $scope.addedLineItems[index] != 'undefined')
               $scope.addedLineItems[index].spProjMonthlyUsage = value;
            else
               $scope.lineItems[index].spProjMonthlyUsage = value;

            return value;
         };

         $scope.specialistForecast = function (item, arr, intVar) {
            var index = arr.indexOf(item);
            console.log('directly forecast');
            item.SpForecastTouched = true;
         };

         //SFDC-5295
         $scope.specialistProductCloseDate = function (item, arr, intVar) {
            var index = arr.indexOf(item);
            if (item.SpCloseDate != null) {
               item.SpCloseDateTouched = true;
            }
         };
         //End of SFDC-5295

         // Function to revalidate prodNameSelect, oppCat, oppSubCat and oppLossReason fields on click of save
         $scope.reValidate = function () {
            console.log('revlaidating: ');
            $scope.addProdForm.submitted = false;

            // angular.forEach($scope.prodIndex,function(item){
            for (var i = 0; i < $scope.addedLineItems.length; i++) {
               if ($scope.addProdForm['prodNameSelect' + i] != undefined)
                  $scope.addProdForm['prodNameSelect' + i].$validate();
            }
            // console.log($scope.mrrTotal);
            if ($scope.addProdForm['oppCat'] != undefined)
               $scope.addProdForm['oppCat'].$validate();
            if ($scope.addProdForm['oppSubCat'] != undefined)
               $scope.addProdForm['oppSubCat'].$validate();
            if ($scope.addProdForm['oppLossReason'] != undefined)
               $scope.addProdForm['oppLossReason'].$validate();
         }

         // Function to calculate total of MRR, EMRI and non commit
         $scope.calculateTotal = function () {
            var extendedLineItems = $scope.lineItems.concat($scope.addedLineItems);
            // console.log(extendedLineItems);
            $scope.isMrrNegLineItem = false;
            $scope.mrrTotal = 0;
            angular.forEach(extendedLineItems, function (item) {
               // console.log(item);

               $scope.mrrTotal += item.netMRR;
               // debugger;
               if (item.netMRR < 0)
                  $scope.isMrrNegLineItem = true;
            })
            // console.log('isMrrNegLineItem: '+$scope.isMrrNegLineItem);
            $scope.nonCommitTotal = 0;
            angular.forEach(extendedLineItems, function (item) {
               $scope.nonCommitTotal += item.netNonCommit;
            })
            $scope.opp.emriTotal = 0;

            $scope.opp.emriTotal = $scope.mrrTotal + $scope.nonCommitTotal;

         };

         // SFDC-3441

         $scope.termChange = function () {
            //alert(event.target.value);
            var profile = '{!JSENCODE($Profile.Name)}';
            var str = event.target.value;
            if (str > 24 || str < 0 || (profile.includes("Sales - Carrier") && (str == '' || !str || 0 === str.length || str.trim().length === 0)))
               $scope.termErrorflag = true;

         };


         // Function that gets called on click of Churn/Cancel Contract Button
         $scope.churn = function () {

            /*SFDC-6398 SFDC-7597
            var disableAddProduct = $scope.opp.Opportunity_Type == 'Auto-Renewal' && $scope.opp.autoRenewCheck;
            if (disableAddProduct) {
               $scope.addproductDisabled = true;
               return;
            }
            $scope.addproductDisabled = false;*/

            var extendedLineItems = $scope.lineItems.concat($scope.addedLineItems);
            $scope.lineItemCopy = angular.copy($scope.lineItems);
            $scope.addedLineItemCopy = angular.copy($scope.addedLineItems);

            // $scope.oppCopy = angular.copy($scope.opp);
            $scope.oppCat = $scope.opp.Opportunity_Category;
            $scope.oppSubCat = $scope.opp.Opportunity_Sub_Category;
            angular.forEach(extendedLineItems, function (item) {
               // console.log(item);
               item.projMonthlyCommitFee = 0;
               item.projOneTimeFee = 0;
               item.projAvgRevNonCommit = 0;
               // item.netMRR = item.projMonthlyCommitFee-item.curMonthlyCommitFee;
            })
            //$scope.opp.Opportunity_Category = 'Customer Churn'; (SFDC-8127)
            $scope.setLossReason();
            $scope.opp.Loss_Reason = '';
            $scope.showRow = false;
            $scope.addRow = false;
            $scope.addedLineItems = [];
            $scope.showUndo = true;
            $scope.freeze = true;
            $scope.fromChurn = true;
            $scope.isEditing = true;
            $scope.churnCopy = $scope.opp.Churn_No_Paper;
            $scope.opp.Churn_No_Paper = '';
            $scope.noPaperMandate = true;
            // console.log($scope.lineItems);
            // console.log($scope.addedLineItems);

         };

         // helper method
         $scope.createStringByArray = function (array) {
            var output = '';
            console.log('createStringByArray');
            console.log(array);
            if (array != null && array != undefined)
               angular.forEach(array, function (object) {

                  output += object + ';';

               })
            output = output.slice(0, -1);
            return output;
         };

         Visualforce.remoting.timeout = 120000;
         // Function that gets called on click of Save & Return Button
         $scope.saveAndReturn = function () {
            console.log('calling saveAndReturn');
            console.log('dirty and editing: ' + $scope.addProdForm.$dirty + ' : ' + $scope.isEditing);
            $scope.setSaveReturn = true;
            if ($scope.addProdForm.$dirty || $scope.isEditing) {
               $scope.save();
            } else if (!$scope.statusMessageExists)
               $window.location.href = $scope.opp.opptyLink;
         };


         $scope.changedFields = [];
         $scope.projChangeCapture = function () {
            console.log('projChangeCapture called');
            console.log($scope.originalLineItem);
            console.log($scope.modifiedLineItemIndex);
            console.log($scope.originalLineItemIndex);
            // debugger;
            // $scope.addProdForm['projAvgRevNonCommit'+$scope.modifiedLineItemIndex[i]].$dirty && 
            // $scope.addProdForm['projMonthlyCommitFee'+$scope.modifiedLineItemIndex[i]].$dirty &&
            for (var i = 0; i < $scope.modifiedLineItemIndex.length; i++) {

               console.log($scope.originalLineItem[$scope.originalLineItemIndex[i]].projAvgRevNonCommit);
               console.log($scope.lineItems[$scope.modifiedLineItemIndex[i]].projAvgRevNonCommit);
               if ($scope.originalLineItem[$scope.originalLineItemIndex[i]].projAvgRevNonCommit != $scope.lineItems[$scope.modifiedLineItemIndex[i]].projAvgRevNonCommit) {
                  console.log($scope.addProdForm['projAvgRevNonCommit' + i]);

                  $scope.usageChanged = true;
               }
               if ($scope.originalLineItem[$scope.originalLineItemIndex[i]].projMonthlyCommitFee != $scope.lineItems[$scope.modifiedLineItemIndex[i]].projMonthlyCommitFee) {
                  console.log($scope.addProdForm['projMonthlyCommitFee' + i]);

                  $scope.commitChanged = true;
               }
            }
            if ($scope.fromChurn || $scope.fromResetFactory) {
               for (var i = 0; i < $scope.lineItems.length; i++) {
                  console.log('fromChurn fromResetFactory');
                  console.log($scope.lineItemCopy[i].projAvgRevNonCommit);
                  console.log($scope.lineItems[i].projAvgRevNonCommit);
                  if ($scope.lineItemCopy[i].projAvgRevNonCommit != $scope.lineItems[i].projAvgRevNonCommit)
                     $scope.usageChanged = true;
                  if ($scope.lineItemCopy[i].projMonthlyCommitFee != $scope.lineItems[i].projMonthlyCommitFee)
                     $scope.commitChanged = true;
               }
            }
            if (!$scope.usageChanged || !$scope.commitChanged) {
               for (var i = 0; i < $scope.addedLineItems.length; i++) {

                  if ($scope.addProdForm['projAvgRevNonCommitAdd' + i].$dirty)
                     $scope.usageChanged = true;
                  if ($scope.addProdForm['projMonthlyCommitFeeAdd' + i].$dirty)
                     $scope.commitChanged = true;
               }
            }

            if ($scope.prodAddedOrDeleted) {
               $scope.usageChanged = true;
               $scope.commitChanged = true;
            }
            // field has no value
            if ($scope.opp.EMRI_Utilization == null || $scope.opp.EMRI_Utilization == '' || $scope.opp.EMRI_Utilization == 'undefined') {
               if ($scope.commitChanged)
                  $scope.opp.EMRI_Utilization = 'Commit';
               if ($scope.usageChanged) {
                  if ($scope.opp.EMRI_Utilization == null || $scope.opp.EMRI_Utilization == '' || $scope.opp.EMRI_Utilization == 'undefined')
                     $scope.opp.EMRI_Utilization = 'Usage';
                  else
                     $scope.opp.EMRI_Utilization += ';Usage';
               }
            }// field has any one value
            else {
               if (($scope.commitChanged && $scope.opp.EMRI_Utilization.indexOf('Commit') == -1) || ($scope.usageChanged && $scope.opp.EMRI_Utilization.indexOf('Usage') == -1))
                  $scope.opp.EMRI_Utilization = 'Commit;Usage';

            }

            console.log('$scope.opp.EMRI_Utilization');
            console.log($scope.usageChanged);
            console.log($scope.commitChanged);

            console.log($scope.opp.EMRI_Utilization);

         };

         $scope.setProdFormSubmit = function () {
            $scope.addProdForm.submitted = false;
            console.log('in setProdFormSubmit');
            console.log($scope.addProdForm.submitted);
         };

         $scope.save = function () {
            console.log('in save: ' + $scope.addProdForm.$valid);
            console.log('scope.unacceptableTerms: ' + $scope.Unacceptable_Terms_and_Conditions);
            console.log($scope.opp.Churn_No_Paper);
            // resetting variable so as to test fresh on input
            $scope.negError = false;
            $scope.NAN = false;
            $scope.reValidate();
            if ($scope.addProdForm.$valid) {
               $scope.setProdFormSubmit();
               $scope.isEditing = false;
               $scope.addProdForm.$dirty = false;
               console.log("form sent");
               console.log($scope.addProdForm.$dirty);

            } else {
               // If for, is invalid, show errors
               $scope.addProdForm.submitted = true;
               console.log($scope.addProdForm.submitted);
               console.log('in else part');
               console.log($scope.addProdForm.churnPaperSelect.$error)
               for (var i = 0; i < $scope.addedLineItems.length; i++) {
                  if ($scope.addProdForm['prodNameSelect' + i].$error.required)
                     $scope.requiredError = true;
                  if ($scope.addProdForm['prodNameSelect' + i].$error.carrierProd) {
                     $scope.carAppError = true;
                  }
               }
               // var extendedLineItems = .concat();

               for (var i = 0; i < $scope.lineItems.length; i++) {
                  console.log('in save errror:');
                  console.log($scope.addProdForm['projMonthlyCommitFee' + i].$error);
                  // SFDC-1288
                  if ($scope.addProdForm['projOneTimeFee' + i].$error.min) {
                     $scope.negError = true;
                  }
                  if ($scope.addProdForm['projAvgRevNonCommit' + i].$error.number || $scope.addProdForm['projMonthlyCommitFee' + i].$error.number || $scope.addProdForm['projOneTimeFee' + i].$error.number) {
                     $scope.NAN = true;
                  }
               }

               for (var i = 0; i < $scope.addedLineItems.length; i++) {
                  // SFDC-1288
                  if ($scope.addProdForm['projOneTimeFeeAdd' + i].$error.min) {
                     $scope.negError = true;
                  }
                  if ($scope.addProdForm['projAvgRevNonCommitAdd' + i].$error.number || $scope.addProdForm['projMonthlyCommitFeeAdd' + i].$error.number || $scope.addProdForm['projOneTimeFeeAdd' + i].$error.number) {
                     $scope.NAN = true;
                  }
               }
               /*if ($scope.addProdForm.oppCat.$error.mrrOppCatNeg || $scope.addProdForm.oppLossReason.$error.mrrOppCatNeg)
                  $scope.mrrNeg = true;*/
               console.log("form failed");
               return;

            }

            //SFDC-7597
            console.log("Hello, here i am"+$scope.opp.Opportunity_Type);             
            if($scope.opp.Opportunity_Type === 'Auto-Renewal'){
               $scope.opp.Opportunity_Type = 'Renewal';
            }
            /* END SFDC-7597*/

            document.getElementById('loading').style.visibility = 'visible';
            $scope.opp.isMrrNegLineItem = $scope.isMrrNegLineItem;
            $scope.opp.CarrierApplication = $scope.createStringByArray($scope.selectedValues);
            var extendedLineItems = $scope.lineItems.concat($scope.addedLineItems);

            // update EMRI_Utilization only when it does'nt have both commit and usage populated
            console.log('$scope.opp.EMRI_Utilization');
            console.log($scope.opp.EMRI_Utilization);


            console.log($scope.lineItems);
            if ($scope.opp.EMRI_Utilization == null || ($scope.opp.EMRI_Utilization != null && $scope.opp.EMRI_Utilization.indexOf('Commit;Usage') == -1))
               $scope.projChangeCapture();

            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.addProductPageControllerMerged.save}',
               angular.toJson(extendedLineItems), angular.toJson($scope.opp), angular.toJson($scope.originalLineItems),
               function (result, event) {
                  //$scope.statusMessageExists=false;
                  console.log('result:');
                  console.log(result);
                  console.log(event.status);
                  console.log(event.message);
                  console.log(event.type);
                  $scope.statusMessage = [];
                  if (result != null && result != undefined && result.length > 0) {
                     $scope.statusMessageExists = true;
                     $scope.statusMessage = Object.keys(result).map(function (k) { return result[k] });
                     console.log('statusMessage' + $scope.statusMessage);
                     console.log('relenght' + $scope.statusMessage.length);
                     document.getElementById('loading').style.visibility = 'hidden';
                  }
                  else if (event.status && event.status.length > 0) {
                     $scope.statusMessageExists = true;
                     $scope.statusMessage = Object.keys(result).map(function (k) { return result[k] });
                     console.log('result2' + result);
                     document.getElementById('loading').style.visibility = 'hidden';
                  }
                  else if (event.type === 'exception') {
                     $scope.statusMessageExists = true;
                     if (result != undefined && result != null && result != '') {
                        $scope.statusMessage = Object.keys(result).map(function (k) { return result[k] });
                     } else {
                        $scope.statusMessage.push('Time Out Error. Please try again after some time.');
                     }
                     console.log('excep' + event.message);
                     console.log(result);
                     document.getElementById('loading').style.visibility = 'hidden';

                  }
                  else {
                     console.log('succeeded' + event.message);
                     location.reload();
                  }
                  $scope.$apply();
                  if ($scope.setSaveReturn && !$scope.statusMessageExists)
                     $window.location.href = $scope.opp.opptyLink;
                  // location.reload();
               }
            );

         };

         $scope.resetFactory = function () {
            var extendedLineItems = $scope.lineItems.concat($scope.addedLineItems);
            $scope.lineItemCopy = angular.copy($scope.lineItems);
            $scope.addedLineItemCopy = angular.copy($scope.addedLineItems);
            angular.forEach(extendedLineItems, function (item) {
               if (item.curMonthlyCommitFee != null && item.curMonthlyCommitFee != undefined && item.curMonthlyCommitFee != '')
                  item.projMonthlyCommitFee = item.curMonthlyCommitFee;
               else
                  item.projMonthlyCommitFee = 0;

               if (item.curAvgRevNonCommit != null && item.curAvgRevNonCommit != undefined && item.curAvgRevNonCommit != '')
                  item.projAvgRevNonCommit = item.curAvgRevNonCommit;
               else
                  item.projAvgRevNonCommit = 0;

               if ((angular.isUndefined(item.curMonthlyCommitFee) || item.curMonthlyCommitFee === null) && (angular.isUndefined(item.curAvgRevNonCommit) || item.curAvgRevNonCommit === null)) {
                  $scope.lineItems.splice($scope.lineItems.indexOf(item), 1);
               }

            })

            $scope.totalMRR = $scope.opp.MRR;
            $scope.totalEMRI = $scope.opp.oppEmri;
            $scope.opp.MRR = 0.00;
            $scope.opp.oppEmri = 0.00;

            if ($scope.opp.autoRenewCheck == true) {
               $scope.oppType = $scope.opp.Opportunity_Type;
               $scope.opp.Opportunity_Type = 'Auto-Renewal';
            }

            $scope.showRow = false;
            $scope.addRow = false;
            $scope.fromResetFactory = true;
            $scope.addedLineItems = [];
            $scope.showUndo = true;
            $scope.freeze = true;
            $scope.isEditing = true;

         };

         $scope.undo = function () {
            $scope.lineItems = $scope.lineItemCopy;
            $scope.addedLineItems = $scope.addedLineItemCopy;
            if ($scope.fromChurn) {
               $scope.opp.Opportunity_Category = $scope.oppCat;

               $scope.opp.Opportunity_Sub_Category = $scope.oppSubCat;

            }

            $scope.opp.MRR = $scope.totalMRR;
            $scope.opp.oppEmri = $scope.totalEMRI;
            $scope.opp.Opportunity_Type = $scope.oppType;

            $scope.showUndo = false;
            $scope.addRow = true;
            $scope.freeze = false;
            $scope.isEditing = false;
            $scope.opp.Churn_No_Paper = $scope.churnCopy;
            $scope.noPaperMandate = false;
            // $scope.addProdForm.submitted = false;
            $scope.setProdFormSubmit();

         };

         $scope.reset = function () {
            location.reload();
         };
         $scope.collapseToggle = function () {
            if ($scope.collapse)
               $scope.collapse = false;
            else
               $scope.collapse = true;
         };
         $scope.isNeg = function (value) {
            if (value < 0)
               return true;
            else
               return false;
         };
         $scope.setSelectedAccount = function (accountId, accountName) {
            $scope.opp.Consolidation_Account_Name = accountName;
            $scope.opp.Consolidation_Account_Id = accountId;
            $scope.addProdForm['oppLossReason'].$validate();
            console.log($scope.opp.Consolidation_Account_Id);

         };

         $scope.searchAccount = function (accountName) {
            document.getElementById('loading-in-table').style.visibility = 'visible';

            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.addProductPageControllerMerged.searchAccount}',
               accountName,
               function (result, event) {
                  console.log(result);
                  $scope.accountdetails = result;
                  $scope.$apply();
                  document.getElementById('loading-in-table').style.visibility = 'hidden';


               }
            );
         };

         //    $scope.setOpportunitySubCategory = function()
         // {
         //   // debugger;
         //    $scope.listofsubcategory = [];
         //    $scope.listofsubcategory = $scope.opptycategorytosubcategory[$scope.opp.Opportunity_Category];
         //    console.log('here'+ $scope.listofsubcategory);

         // };

         $scope.setLossReason = function () {
            $scope.listoflossreason = [];
            $scope.listoflossreason = $scope.opptycategorytolossreason[$scope.opp.Opportunity_Category];
            console.log($scope.listoflossreason);

         };
            }]);

         // Start of directives for validations
         app.directive('confirmOnExit', function () {

            return {
               link: function ($scope, elem, attrs) {
                  window.onbeforeunload = function () {
                     if ($scope.addProdForm.$dirty || $scope.isEditing) {
                        return "The form is dirty, do you want to stay on the page?";
                     }
                  }
                  $scope.$on('$locationChangeStart', function (event, next, current) {
                     if ($scope.addProdForm.$dirty || $scope.isEditing) {
                        if (!confirm("The form is dirty, do you want to stay on the page?")) {
                           event.preventDefault();
                        }
                     }
                  });
               }
            };
         });
         app.directive('customValidate', [function () {
            return {
               // restrict to an attribute type.
               restrict: 'A',

               // element must have ng-model attribute.
               require: 'ngModel',
               // scope = the parent scope
               // elem = the element the directive is on
               // attr = a dictionary of attributes on the element
               // ctrl = the controller for ngModel.
               link: function (scope, elem, attr, ctrl) {

                  var idToFamilyMap = {};
                  var idToItemNameMap = {};

                  var emrgingItemName = false;
                  angular.forEach(scope.prod, function (item) {
                     idToFamilyMap[item.PricebookEntries.records[0].Id] = item.Family;
                     idToItemNameMap[item.PricebookEntries.records[0].Id] = item.Name;

                  });
                  var newAddedli = [];
                  ctrl.$validators.carrierProd = function (value) {

                     console.log('in carrierProd: ' + scope.addProdForm.$valid);
                     var carApp = scope.selectedValues;
                     scope.carAppError = false;
                     var carFamily = false;

                     angular.forEach(scope.addedLineItems, function (lineItem) {
                        if (idToFamilyMap[lineItem.productName] == "Carrier" || idToFamilyMap[value] == "Carrier") {
                           carFamily = true;
                        }
                     });

                     var carAppVar = '';
                     if (carApp != undefined && carApp.length == 0)
                        carAppVar = null;

                     if ((angular.isUndefined(carApp) || carApp == null || carAppVar == null) && carFamily) {

                        return false;
                     }
                     else {
                        return true;
                     }
                  }



               }
            };
         }]);

         app.directive('customValidateCompetitorOpp', [function () {
            return {
               // restrict to an attribute type.
               restrict: 'A',

               // element must have ng-model attribute.
               require: 'ngModel',

               // scope = the parent scope
               // elem = the element the directive is on
               // attr = a dictionary of attributes on the element
               // ctrl = the controller for ngModel.
               link: function (scope, elem, attr, ctrl) {

                  /*ctrl.$validators.competitor = function (value) {
                     var stage = scope.opp.stageName;
                     var stageFirstChar = parseInt(stage.charAt(0));

                     if ((scope.profile.indexOf('SA') == 0 || scope.profile.indexOf('Sales') == 0) && stageFirstChar > 2 && (value == null || angular.isUndefined(value) || value == '--None--'))
                        return false;
                     else
                        return true;

                  }*/

               }
            };
         }]);
         app.directive('customValidateMrrOpp', [function () {
            return {
               // restrict to an attribute type.
               restrict: 'A',

               // element must have ng-model attribute.
               require: 'ngModel',

               // scope = the parent scope
               // elem = the element the directive is on
               // attr = a dictionary of attributes on the element
               // ctrl = the controller for ngModel.
               link: function (scope, elem, attr, ctrl) {

                 /* ctrl.$validators.mrrOppCatNeg = function (value) {
                     var recordTypeName = scope.opp.RecordTypeName;
                     if (scope.profile.indexOf('Sales') == 0 && (recordTypeName == 'Akamai Opportunity' || recordTypeName == 'Closed Opportunity') && ((value == null || angular.isUndefined(value) || value == '--None--' || value == '')) && scope.isMrrNegLineItem) {
                        return false;
                     }
                     else {
                        return true;
                     }

                  }*/

               }
            };
         }]);
         app.directive('customValidateLossReason', [function () {
            return {
               // restrict to an attribute type.
               restrict: 'A',
               // priority: -1,
               // element must have ng-model attribute.
               require: ['^?addProdController', 'ngModel'],

               // scope = the parent scope
               // elem = the element the directive is on
               // attr = a dictionary of attributes on the element
               // ctrl = the controller for ngModel.
               link: function (scope, elem, attr, ctrls) {
                  console.log(ctrls);
                  var parent1 = ctrls[0];
                  var ctrl = ctrls[1];
                  console.log('parent1:');
                  console.log(parent1);
                  console.log(ctrl);
                  ctrl.$validators.lossReasonValue = function (elemvalue) {
                     var lossReason = scope.opp.Loss_Reason;

                     var recordTypeName = scope.opp.RecordTypeName;
                     var lossvalue = {};

                     // lossvalue[scope.mapOfFieldToValue['Unacceptable_Terms_and_Conditions']] = 'Unacceptable_Terms_and_Conditions';
                     // lossvalue[scope.mapOfFieldToValue['Initial_Out_Clause_Description']] = "Initial_Out_Clause_Description";
                     lossvalue[scope.mapOfFieldToValue['Aggregation_Partner']] = "Aggregation_Partner";
                     lossvalue[scope.mapOfFieldToValue['Consolidation_Account_Id']] = "Consolidation_Account_Id";
                     // lossvalue[scope.mapOfFieldToValue['Missing_Product_Feature']] = "Missing_Product_Feature";

                     lossvalue[scope.mapOfFieldToValue['Competitor']] = "Competitor";
                     lossvalue[scope.mapOfFieldToValue['Competitor_2']] = "Competitor";
                     lossvalue[scope.mapOfFieldToValue['Competitor_3']] = "Competitor";


                     scope.Unacceptable_Terms_and_Conditions = false;
                     scope.Initial_Out_Clause_Description = false;
                     scope.Aggregation_Partner = false;
                     scope.Consolidation_Account_Id = false;
                     scope.Competitor = false;
                     scope.Missing_Product_Feature = false;

                     //SFDC-6398
                     scope.Opportunity_Type = false;
                     var formValidity = true;
                     console.log(lossvalue);
                     if (scope.opp.Competitor != null && scope.opp.Competitor.indexOf("Other") != -1) {
                        scope.otherCompetitorSelected = true;
                     }
                     // console.log(lossvalue[elemvalue]);
                     // if((lossvalue[elemvalue]!=undefined && lossvalue[elemvalue]!=null)||(lossvalue[lossReason]!=undefined && lossvalue[lossReason]!=null)){
                     //     var value = (lossvalue[elemvalue]!=undefined?lossvalue[elemvalue]:lossvalue[lossReason])
                     //    if(scope.profile=='Sales' && recordTypeName=='Akamai Opportunity' && (scope.opp[value]==null || angular.isUndefined(scope.opp[value]) || scope.opp[value]=='--None--')){
                     //     console.log('validation failed');
                     //     scope[value] = true;
                     //     // scope.$apply();
                     //     // keepGoing = false;
                     //     formValidity = false;
                     //   }
                     // }
                     angular.forEach(lossvalue, function (value, key) {
                        if (scope.profile.indexOf('Sales') == 0 && (recordTypeName == 'Akamai Opportunity' || recordTypeName == 'Closed Opportunity') && ((lossReason == key || elemvalue == key) && (scope.opp[value] == null || angular.isUndefined(scope.opp[value]) || scope.opp[value] == '--None--'))) {

                           console.log('validation failed');
                           scope[value] = true;
                           formValidity = false;
                        }


                     });
                     // need this check as key cannot be repeated in map and its same for Missing_Product_Feature
                     if (((elemvalue == scope.mapOfFieldToValue['Competitor_2'] || lossReason == scope.mapOfFieldToValue['Competitor_2']) && (scope.opp['Missing_Product_Feature'] == null || angular.isUndefined(scope.opp['Missing_Product_Feature']) || scope.opp['Missing_Product_Feature'] == '--None--'))) {
                        scope.Missing_Product_Feature = true;
                        formValidity = false;
                     }
                     console.log('in lossReasonValue keepGoing: ' + scope.addProdForm.$valid + ' : ' + formValidity);
                     if (formValidity)
                        scope.setProdFormSubmit();
                     return formValidity;

                  }

               }
            };
         }]);
// SFDC-1288 : Directive to check if input is positive or not -> being used in projected fields
// commenting out this directive because its not used currently, but not removing it as it can be used later.
// app.directive('inputPositive', [function() {
//     return {
//         // restrict: 'A',
//         require: 'ngModel',
//         link: function(scope, elem, attrs, ctrl) {
//             if (!ctrl) return;
//             ctrl.$validators.positive = function(value) {
//                 console.log('inputPositive');
//                 console.log(value && value >= 0);
//                 return value && value >= 0;
//             };
//         }
//     };
// }]);
      </script>
      <!-- sonali - To do: please remove these styles out of page to style sheet -->
      <style>
         .table-fixed thead {
            width: 97%;
         }

         .table-fixed tbody {
            height: 230px;
            overflow-y: auto;
            overflow-x: auto;
            width: 100%;
         }

         .table-fixed thead,
         .table-fixed tbody,
         .table-fixed tr,
         .table-fixed td,
         .table-fixed th {
            display: block;
         }

         .table-fixed tbody td,
         .table-fixed thead>tr>th {
            float: left;
            border-bottom-width: 0;
         }

         .account-search-dialog {
            width: 80%;
         }
      </style>
      <script>
         $(document).ready(function () {
            // $('[data-toggle="tooltip"]').tooltip();
            $('[data-toggle="popover"]').popover({ 'trigger': 'hover' });
         });
      </script>
   </head>

   <body id="addContainer" ng-cloak="x">
      <div class="container-placeholder">
         <div ng-controller="addProdController" ng-init="isCollapsed = !isCollapsed">

            <!-- Start of loading icon -->
            <div id="loading">
               <img id="loading-image" alt="Loading..." src="{!URLFOR($Resource.EMRIAddProduct,'EMRIAddProduct/images/loading_gears.gif')}"
               />
            </div>
            <!-- End of loading icon -->
            <!-- Start of title-->
            <div class="row page-title-row">
               <h3> Manage Products </h3>
            </div>
            <!-- End of title -->
            <!-- Start of top button row-->
            <div class="row text-center top-buttons-row clearfix">
               <!-- <div class="btn-group col-xs-5 col-md-5"> -->
               <button class="btn top-button" type="submit" ng-click="saveAndReturn()">{{mapOfFieldToValue['btn_saveAndReturn']}}</button>
               <button class="btn top-button" ng-show="addProdForm.$dirty || isEditing" type="submit" ng-click="save()">{{mapOfFieldToValue['btn_Quick_Save']}}</button>
               <button class="btn top-button" ng-show="addProdForm.$dirty || isEditing" ng-click="reset()">{{mapOfFieldToValue['btn_Reset']}}</button>

            </div>
            <!-- End of top button row -->
            <!-- SFDC-6398 -->
            <!-- SFDC-7597
            <div class="alert alert-danger fade in alert-div-customized" ng-show="addproductDisabled">
               <ul>
                  <li>
                     <p>{{mapOfFieldToHelpTextOrError['AutoRenewalError']}}</p>
                  </li>
               </ul>
            </div> -->

            <div class="alert alert-danger fade in alert-div-customized" ng-show="statusMessageExists && statusMessage">
               <ul>
                  <li ng-repeat="status in statusMessage">
                     {{status}}
                  </li>
               </ul>
            </div>
            <div ng-if="addProdForm.submitted" class="alert alert-danger fade in alert-div-customized">
               <ul>
                  <li ng-if="carAppError">{{mapOfFieldToHelpTextOrError['Carrier_Application']}}</li>
                  <li ng-if="negError">{{mapOfFieldToHelpTextOrError['negError']}}</li>
                  <li ng-if="NAN">{{mapOfFieldToHelpTextOrError['NAN']}}</li>
                  <li ng-if="addProdForm.oppCompetitor.$error.competitor">{{mapOfFieldToHelpTextOrError['Competitor_Primary']}}</li>
                  <li ng-if="mrrNeg">{{mapOfFieldToHelpTextOrError['mrrNeg']}}</li>
                  <li ng-if="Unacceptable_Terms_and_Conditions">{{mapOfFieldToHelpTextOrError['Unacceptable_Terms_and_Conditions']}}</li>
                  <li ng-if="Initial_Out_Clause_Description">{{mapOfFieldToHelpTextOrError['Initial_Out_Clause_Description']}}</li>
                  <li ng-if="Aggregation_Partner">{{mapOfFieldToHelpTextOrError['Aggregation_Partner']}}</li>
                  <li ng-if="Consolidation_Account_Id">{{mapOfFieldToHelpTextOrError['Consolidation_Account_Id']}}</li>
                  <li ng-if="Competitor">{{mapOfFieldToHelpTextOrError['Competitor']}}</li>
                  <li ng-if="Missing_Product_Feature">{{mapOfFieldToHelpTextOrError['Missing_Product_Feature']}}</li>
                  <li ng-if="requiredError">{{mapOfFieldToHelpTextOrError['Product_Name_Required']}}</li>
                  <li ng-if="addProdForm.churnPaperSelect.$error.required">{{mapOfFieldToHelpTextOrError['Churn_No_Paper']}}</li>
                  <li ng-if="addProdForm.initialOutClause.$error.maxlength">{{mapOfFieldToHelpTextOrError['Field_Max_Length']}}</li>
                  <li ng-if="addProdForm.unacceptableTerms.$error.maxlength && !addProdForm.initialOutClause.$error.maxlength">{{mapOfFieldToHelpTextOrError['Field_Max_Length']}}</li>
                  <li ng-if="termErrorflag">{{mapOfFieldToHelpTextOrError['TermErrorMessage']}}</li>
                  <li ng-if="termIsRequired">{{mapOfFieldToHelpTextOrError['termIsRequiredMessage']}}</li>
                  <!--SFDC-6398 
                  SFDC-7597
                  <li ng-if="OpptytypeChangeError">{{mapOfFieldToHelpTextOrError['AutoRenewalError']}}</li>
                  -->

               </ul>
            </div>
            <form name="addProdForm" confirm-on-exit="x">
               <!--Start of Opportunity Detail Section -->
               <div class="row detail-header">
                  Opportunity Details
               </div>
               <!--Opportunity Information Section SFDC-5573-->
               <div id="opportunity-info-section">
                  <div class="row detail-sub-header">
                     <h5>Opportunity information</h5>
                  </div>
                  <div class="row">
                     <table class="table" id="detail-section-table">
                        <!-- SFDC-1588 -->
                        <tr>
                           <td class="detail-section-field-label">Account Name</td>
                           <td ng-mouseleave="unsetMode('Account_Name')" class="detail-section-field-info" ng-mouseover="setMode('Account_Name')">
                              {{opp.AccName}}
                              <span class="text-right" ng-show="mapOfFieldToMode['Account_Name']">
                                 <ng-include src="mapOfFieldToTemplate['Account_Name']"></ng-include>
                              </span>
                           </td>
                           <td class="detail-section-field-label">Opportunity Name</td>
                           <td ng-mouseleave="unsetMode('Opportunity_Name')" class="detail-section-field-info" ng-mouseover="setMode('Opportunity_Name')">{{opp.Name}}
                              <span ng-show="mapOfFieldToMode['Opportunity_Name']">
                                 <ng-include src="mapOfFieldToTemplate['Opportunity_Name']"></ng-include>
                              </span>
                           </td>
                        </tr>
                        <!--SFDC-6398-->
                        <tr>

                           <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="Opportunity_Type && addProdForm.submitted">
                                 Opportunity Type
                              </span>
                              <span ng-hide="Opportunity_Type && addProdForm.submitted">
                                 Opportunity Type
                              </span>
                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Opportunity_Type')" ng-mouseleave="unsetMode('Opportunity_Type')">
                              <span ng-show="!editing && (Opportunity_Type && addProdForm.submitted)" class="text-center invalidfield">{{opp.Opportunity_Type}}</span>
                              <span ng-hide="editing || (Opportunity_Type && addProdForm.submitted)" class="text-center">{{opp.Opportunity_Type}}</span>
                              <select name="opportunityType" ng-show="editing" id="opportunityTypeSelect" ng-model="opp.Opportunity_Type" ng-options="option for option in opportunityType"></select>
                              <span ng-show="mapOfFieldToMode['Opportunity_Type']">
                                 <ng-include src="mapOfFieldToTemplate['Opportunity_Type']"></ng-include>
                              </span>
                           </td>
                        </tr>
                        <!--Rajesh ##SFDC-7061 -|- Adding Zoff Status and Optout Reason -->
                        <tr>
                           <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="Zoff_Status && addProdForm.submitted">
                                 ZOFF Status
                              </span>
                              <span ng-hide="Zoff_Status && addProdForm.submitted">
                                 ZOFF Status
                              </span>
                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Zoff_Status')" ng-mouseleave="unsetMode('Zoff_Status')">
                              <span ng-show="!editing && (Zoff_Status && addProdForm.submitted)" class="text-center invalidfield">{{opp.Zoff_Status}}</span>
                              <span ng-hide="editing || (Zoff_Status && addProdForm.submitted)" class="text-center">{{opp.Zoff_Status}}</span>
                              <select name="zoffStatus" ng-show="editing" id="zoffStatusselectSelect" ng-model="opp.Zoff_Status" ng-options="option for option in zoffStatus"></select>
                              <span ng-show="mapOfFieldToMode['Zoff_Status']">
                                 <ng-include src="mapOfFieldToTemplate['Zoff_Status']"></ng-include>
                              </span>
                           </td>
                           <td class="detail-section-field-label">ZOFF Opt out Reason</td>
                           <td ng-click="editing = true" ng-mouseleave="unsetMode('Zoff_Opt_Out_Reason')" class="detail-section-field-info" ng-mouseover="setMode('Zoff_Opt_Out_Reason')">
                              <span ng-show="!editing" class="text-center">{{opp.Zoff_Opt_Out_Reason}} </span>
                              <textarea class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.Zoff_Opt_Out_Reason" />
                              <span ng-show="mapOfFieldToMode['Zoff_Opt_Out_Reason']">
                                 <ng-include src="mapOfFieldToTemplate['Zoff_Opt_Out_Reason']"></ng-include>
                              </span>
                           </td>
                        </tr>
                        <!--End #SFDC-7061 -->
                     </table>
                  </div>
               </div>
               <!--Forecasting Information Section -->
               <div id="forecasting-info-section">
                  <div class="row detail-sub-header">
                     <h5>Forecasting information</h5>
                  </div>
                  <div class="row">
                     <table class="table" id="detail-section-table">
                        <!-- SFDC-1588 -->
                        <tr>
                           <td class="detail-section-field-label">MRR</td>
                           <td ng-mouseleave="unsetMode('MRR')" class="detail-section-field-info" ng-class="{'negValue': isNeg(opp.MRR )}" ng-mouseover="setMode('MRR')">
                              {{opp.CurrencyCode}} {{opp.MRR | currency : "" : 2}}
                              <span class="text-right" ng-show="mapOfFieldToMode['MRR']">
                                 <ng-include src="mapOfFieldToTemplate['MRR']"></ng-include>
                              </span>
                           </td>
                           <td class="detail-section-field-label">Currency</td>
                           <td ng-mouseleave="unsetMode('Currency_Code')" class="detail-section-field-info" ng-mouseover="setMode('Currency_Code')">{{opp.CurrencyCode}}
                              <span ng-show="mapOfFieldToMode['Currency_Code']">
                                 <ng-include src="mapOfFieldToTemplate['Currency_Code']"></ng-include>
                              </span>
                           </td>
                           <!-- <td class="detail-section-field-label">Strategic MRR</td>
                            <td ng-mouseleave="unsetMode('Strategic_MRR')" class = "detail-section-field-info" ng-class="{'negValue': isNeg(opp.Strategic_MRR )}" ng-mouseover=
                            "setMode('Strategic_MRR')">{{opp.CurrencyCode}} {{opp.Strategic_MRR
                            | currency : "" : 2}} 
                           <span ng-show="mapOfFieldToMode['Strategic_MRR']">
                                <ng-include src="mapOfFieldToTemplate['Strategic_MRR']" ></ng-include> 
                            </span> 
                            </td> -->

                        </tr>
                        <!-- SFDC-5573 -->
                        <tr>
                           <td class="detail-section-field-label">Forecast Category</td>
                           <td ng-mouseleave="unsetMode('Forecast_Category')" class="detail-section-field-info" ng-class="{'negValue': isNeg(opp.Forecast_Category )}"
                              ng-mouseover="setMode('Forecast_Category')">
                              {{opp.ForecastCat}}
                              <span class="text-right" ng-show="mapOfFieldToMode['Forecast_Category']">
                                 <ng-include src="mapOfFieldToTemplate['Forecast_Category']"></ng-include>
                              </span>
                           </td>
                           <td class="detail-section-field-label">Close Date</td>
                           <td ng-mouseleave="unsetMode('Close_Date')" class="detail-section-field-info" ng-mouseover="setMode('Close_Date')">{{opp.CloseDate | date:'MM/dd/yyyy'}}
                              <span ng-show="mapOfFieldToMode['Close_Date']">
                                 <ng-include src="mapOfFieldToTemplate['Close_Date']"></ng-include>
                              </span>
                           </td>

                        </tr>
                        <tr>
                           <td class="detail-section-field-label">EMRI</td>
                           <td ng-mouseleave="unsetMode('oppEmri')" class="detail-section-field-info" ng-class="{'negValue': isNeg(opp.oppEmri )}" ng-mouseover="setMode('oppEmri')">{{opp.CurrencyCode}} {{opp.oppEmri | currency : "" : 2}}
                              <span ng-show="mapOfFieldToMode['oppEmri']">
                                 <ng-include src="mapOfFieldToTemplate['oppEmri']"></ng-include>
                              </span>
                           </td>

                           <td class="detail-section-field-label">EMRI Comments</td>
                           <td ng-click="editing = true" ng-mouseleave="unsetMode('emriComments')" class="detail-section-field-info" ng-mouseover="setMode('emriComments')">
                              <span ng-show="!editing" class="text-center">{{opp.emriComments}} </span>
                              <textarea class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.emriComments" />
                              <span ng-show="mapOfFieldToMode['emriComments']">
                                 <ng-include src="mapOfFieldToTemplate['emriComments']"></ng-include>
                              </span>
                           </td>
                        </tr>

                        <!--  <tr>
                            <td class="detail-section-field-label">EMRI Comments</td>
                            <td ng-click="editing = true" ng-mouseleave="unsetMode('emriComments')" class = "detail-section-field-info" ng-mouseover=
                            "setMode('emriComments')">
                            <span ng-show="!editing" class="text-center">{{opp.emriComments}} </span>
                            <textarea class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.emriComments"/>
                             <span ng-show="mapOfFieldToMode['emriComments']">
                                <ng-include src="mapOfFieldToTemplate['emriComments']" ></ng-include> 
                            </span> 
                            </td>
                            
                        </tr> -->

                     </table>
                  </div>
               </div>
               <!--Forecasting Information Section -->
               <!--Cancellation/Loss Information Section -->
               <!--SFDC-3256 Various changes for Agility : 
                  Removing [Subcategory,Initial_Out_Clause,Unsupported_Terms,Missing product Feature], 
                  Linking Loss reasons to category,
                  Adding Additional Loss Reasons field to page  -->
               <div id="cancellation-loss-info-section">
                  <div class="row detail-sub-header">
                     <h5>Cancellation And Loss Information</h5>
                  </div>
                  <div class="row">
                     <table class="table" id="detail-section-table">
                        <tr>
                           <td class="detail-section-field-label">
                              <span ng-class="{'invalidfieldLabel': mrrNeg && !opp.Opportunity_Category && addProdForm.submitted}">
                                 Loss Category
                              </span>
                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Opportunity_Category')" ng-mouseleave="unsetMode('Opportunity_Category')">
                              <span ng-show="!editing && (mrrNeg && !opp.Opportunity_Category && addProdForm.submitted)" class="text-center invalidfield">{{opp.Opportunity_Category}}
                              </span>
                              <span ng-hide="editing || (mrrNeg && !opp.Opportunity_Category && addProdForm.submitted)" class="text-center">{{opp.Opportunity_Category}}
                              </span>
                              <select name="oppCat" ng-show="editing" ng-submit="editing = false" id="categoryid" ng-model="opp.Opportunity_Category" ng-options="category as category for category in listofcategory"
                                 ng-change="setLossReason()" custom-validate-mrr-opp="opp.Opportunity_Category"></select>
                              <span ng-show="mapOfFieldToMode['Opportunity_Category']">
                                 <ng-include src="mapOfFieldToTemplate['Opportunity_Category']"></ng-include>
                              </span>
                           </td>

                           <td class="detail-section-field-label">
                              New/Churn
                           </td>
                           <td class="detail-section-field-info" ng-mouseover="setMode('New_Churn')" ng-mouseleave="unsetMode('New_Churn')">
                              <span class="text-center">{{opp.New_Churn}}</span>
                              <span ng-show="mapOfFieldToMode['New_Churn']">
                                 <ng-include src="mapOfFieldToTemplate['New_Churn']"></ng-include>
                              </span>
                           </td>
                        </tr>
                        <tr>
                           <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="mrrNeg && !opp.Loss_Reason && addProdForm.submitted">
                                 Loss Reason
                              </span>
                              <span ng-hide="mrrNeg && !opp.Loss_Reason && addProdForm.submitted">
                                 Loss Reason
                              </span>
                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Loss_Reason')" ng-mouseleave="unsetMode('Loss_Reason')">
                              <span ng-show="!editing && (mrrNeg && !opp.Loss_Reason && addProdForm.submitted)" class="text-center invalidfield">{{opp.Loss_Reason}}</span>
                              <span ng-hide="editing || (mrrNeg && !opp.Loss_Reason && addProdForm.submitted)" class="text-center">{{opp.Loss_Reason}}</span>
                              <select name="oppLossReason" ng-show="editing" ng-submit="editing = false" id="lossreasonid" ng-model="opp.Loss_Reason" ng-options="lossreason for lossreason in listoflossreason"
                                 custom-validate-mrr-opp="opp.Loss_Reason" custom-validate-loss-reason="opp.Loss_Reason"></select>
                              <span ng-show="mapOfFieldToMode['Loss_Reason']">
                                 <ng-include src="mapOfFieldToTemplate['Loss_Reason']"></ng-include>
                              </span>
                           </td>

                           <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="Aggregation_Partner && addProdForm.submitted">
                                 Aggregation Partner
                              </span>
                              <span ng-hide="Aggregation_Partner && addProdForm.submitted">
                                 Aggregation Partner
                              </span>
                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Aggregation_Partner')" ng-mouseleave="unsetMode('Aggregation_Partner')">
                              <span ng-show="!editing && (Aggregation_Partner && addProdForm.submitted)" class="text-center invalidfield">{{opp.Aggregation_Partner}}</span>
                              <span ng-hide="editing || (Aggregation_Partner && addProdForm.submitted)" class="text-center">{{opp.Aggregation_Partner}}</span>

                              <select name="aggPartner" ng-show="editing" id="aggPartnerSelect" ng-model="opp.Aggregation_Partner" ng-options="option for option in aggPartner"
                                 ng-change="addProdForm['oppLossReason'].$validate();"></select>

                              <span ng-show="mapOfFieldToMode['Aggregation_Partner']">
                                 <ng-include src="mapOfFieldToTemplate['Aggregation_Partner']"></ng-include>
                              </span>
                           </td>

                        </tr>

                        <tr>
                           <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="additionalLossDetailErr &&!opp.Loss_Cancellation_Description && addProdForm.submitted">
                                 Additional Loss Detail
                              </span>
                              <span ng-hide="additionalLossDetailErr &&!opp.Loss_Cancellation_Description && addProdForm.submitted">
                                 Additional Loss Detail
                              </span>
                           </td>
                           <td ng-click="editing = true" ng-mouseleave="unsetMode('Loss_Cancellation_Description')" class="detail-section-field-info"
                              ng-mouseover="setMode('Loss_Cancellation_Description')">
                              <span ng-show="!editing" class="text-center">{{opp.Loss_Cancellation_Description}} </span>
                              <textarea name="lossDescription" class="resizable-textarea" ng-show="editing" ng-submit="editing = false" ng-model="opp.Loss_Cancellation_Description"
                                 ng-maxlength="255" />
                              <span ng-show="mapOfFieldToMode['Loss_Cancellation_Description']">
                                 <ng-include src="mapOfFieldToTemplate['Loss_Cancellation_Description']"></ng-include>
                              </span>
                              <div role="alert">
                                 <span class="error" ng-show="addProdForm.lossDescription.$error.maxlength">
                                    Maximum 255 characters!</span>
                              </div>
                           </td>

                           <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="Consolidation_Account_Id && addProdForm.submitted">
                                 Consolidation Account
                              </span>
                              <span ng-hide="Consolidation_Account_Id && addProdForm.submitted">
                                 Consolidation Account
                              </span>
                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Consolidation_Account_Id')" ng-mouseleave="unsetMode('Consolidation_Account_Id')">
                              <span ng-show="!editing && (Consolidation_Account_Id && addProdForm.submitted)" class="text-left invalidfield">
                                 <a href="/{{opp.Consolidation_Account_Id}}" target="_blank">{{opp.Consolidation_Account_Name}}</a>
                              </span>
                              <span ng-hide="editing || (Consolidation_Account_Id && addProdForm.submitted)" class="text-left">
                                 <a href="/{{opp.Consolidation_Account_Id}}" target="_blank">{{opp.Consolidation_Account_Name}}</a>
                              </span>

                              <input name="accountname" ng-show="editing || !opp.Consolidation_Account_Name " type="text" ng-model="opp.Consolidation_Account_Name"
                                 class="text-left" ng-change="addProdForm['oppLossReason'].$validate();" ng-minlength="3" />

                              <button class="btn search-button" ng-click="searchAccount(opp.Consolidation_Account_Name) " data-target="#myModal" data-toggle="modal"
                                 ng-disabled="addProdForm.accountname.$error.minlength || !opp.Consolidation_Account_Name">
                                 <i class="fa fa-search" aria-hidden="true"></i>
                              </button>

                              <span ng-show="mapOfFieldToMode['Consolidation_Account_Id']">
                                 <ng-include src="mapOfFieldToTemplate['Consolidation_Account_Id']"></ng-include>
                              </span>

                              <div role="alert">
                                 <span class="error" ng-show="addProdForm.accountname.$error.minlength">
                                    Please enter at least 3 characters!</span>
                              </div>

                              <div class="modal fade" id="myModal" role="dialog">
                                 <div class="modal-dialog account-search-dialog">
                                    <div class="modal-content">
                                       <div class="modal-header">
                                          <button class="close" data-dismiss="modal" type="button">&times;</button>
                                          <h4 class="modal-title">Search Results</h4>
                                       </div>
                                       <div class="modal-body accountsearch-modal-body">

                                          <div id="loading-in-table">
                                             <img id="loading-image" alt="Loading..." src="{!URLFOR($Resource.EMRIAddProduct,'EMRIAddProduct/images/loading_gears.gif')}"
                                             />
                                          </div>
                                          <div ng-show="!accountdetails">
                                             No accounts found!
                                          </div>
                                          <table ng-show="accountdetails" class="table header-fixed">
                                             <thead>
                                                <tr>
                                                   <th width="12%">Account Name</th>
                                                   <th width="15%">Account Owner Alias</th>
                                                   <th width="9%">Type</th>
                                                   <th width="12%">Support Level</th>
                                                   <th width="15%">Billing State/Province</th>
                                                   <th width="12%">Billing Country</th>
                                                   <th width="12%">Vertical</th>
                                                   <th width="12%">AKAM Account ID</th>
                                                </tr>
                                             </thead>
                                             <tbody>
                                                <tr ng-repeat="accitem in accountdetails">
                                                   <td width="12%">
                                                      <a href="#" data-ng-click="setSelectedAccount(accitem.accountId,accitem.accountName)"
                                                         data-dismiss="modal">
                                                         <span ng-bind-html="accitem.accountName"></span>
                                                      </a>
                                                   </td>
                                                   <td width="15%" ng-bind-html="accitem.ownerAlias"></td>
                                                   <td width="9%" ng-bind-html="accitem.accountType"></td>
                                                   <td width="12%" ng-bind-html="accitem.supportLevel"></td>
                                                   <td width="15%" ng-bind-html="accitem.billingState"></td>
                                                   <td width="12%" ng-bind-html="accitem.billingCountry"></td>
                                                   <td width="12%" ng-bind-html="accitem.vertical"></td>
                                                   <td width="12%" ng-bind-html="accitem.akamAccountId"></td>
                                                </tr>
                                             </tbody>
                                          </table>
                                       </div>


                                    </div>

                                 </div>
                              </div>


                           </td>


                        </tr>


                        <tr>
                           <td class="detail-section-field-label">
                              <span class="invalidfieldLabel" ng-show="(addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted">
                                 Competitor
                              </span>
                              <span ng-hide="(addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted">
                                 Competitor
                              </span>

                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Competitor')" ng-mouseleave="unsetMode('Competitor')">
                              <span ng-show="!editing && ((addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted)" class="text-center invalidfield">{{opp.Competitor}}</span>
                              <span ng-hide="editing || ((addProdForm.oppCompetitor.$error.competitor || Competitor) && addProdForm.submitted)" class="text-center">{{opp.Competitor}}</span>
                              <select name="oppCompetitor" ng-show="editing" id="CompetitorSelect" ng-model="opp.Competitor" ng-options="option for option in competitor"
                                 custom-validate-competitor-opp="opp.Competitor" ng-change="addProdForm['oppLossReason'].$validate();">
                              </select>

                              <span ng-show="mapOfFieldToMode['Competitor']">
                                 <ng-include src="mapOfFieldToTemplate['Competitor']"></ng-include>
                              </span>
                           </td>
                           <td class="detail-section-field-label">
                              <span ng-class="{'invalidfieldLabel': addProdForm.churnPaperSelect.$error.required && addProdForm.submitted}">
                                 Contract Ended - No Paper
                              </span>

                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Churn_No_Paper')" ng-mouseleave="unsetMode('Churn_No_Paper')">
                              <span ng-show="addProdForm.churnPaperSelect.$error.required && addProdForm.submitted && !editing" class="text-center invalidfield">{{opp.Churn_No_Paper}}</span>
                              <span ng-hide="editing || (addProdForm.churnPaperSelect.$error.required && addProdForm.submitted)" class="text-center">{{opp.Churn_No_Paper}}</span>
                              <select name="churnPaperSelect" ng-show="editing" id="churnPaperSelect" ng-model="opp.Churn_No_Paper" ng-options="o.value as o.label for o in churnOptions"
                                 ng-required="noPaperMandate" ng-change="reValidate()"></select>
                              <span ng-show="mapOfFieldToMode['Churn_No_Paper']">
                                 <ng-include src="mapOfFieldToTemplate['Churn_No_Paper']"></ng-include>
                              </span>
                           </td>
                        </tr>
                        <tr ng-show="otherCompetitorSelected">
                           <td class="detail-section-field-label" ng-show="otherCompetitorSelected">
                              Other Competitor(s)
                           </td>
                           <td class="detail-section-field-info" ng-click="editing = true" ng-mouseover="setMode('Other_Competitor_Name')" ng-mouseleave="unsetMode('Other_Competitor_Name')">
                              <input ng-change="editing = true" ng-show="editing" name="otherCompetitor" id="otherCompetitorText" type="text" ng-model="opp.Other_Competitor_Name">
                              </input>
                              <span ng-show="!editing" class="text-center">{{opp.Other_Competitor_Name}} </span>
                              <span ng-show="mapOfFieldToMode['Other_Competitor_Name']">
                                 <ng-include src="mapOfFieldToTemplate['Other_Competitor_Name']"></ng-include>
                              </span>
                           </td>
                        </tr>
                     </table>
                  </div>
               </div>
               <!--Cancellation/Loss Information Section -->
               <!--Additional Information Section -->
               <div id="additional-info-section">
                  <div class="row detail-sub-header">
                     <h5>Additional information</h5>
                  </div>
                  <div class="row">
                     <table class="table" id="detail-section-table">
                        <tr>
                           <td class="detail-section-field-label" ng-show="carAppError && addProdForm.submitted">
                              <span class="invalidfieldLabel">
                                 Carrier Application
                              </span>
                           </td>
                           <td class="detail-section-field-label" ng-hide="carAppError && addProdForm.submitted">
                              <span>
                                 Carrier Application
                              </span>
                           </td>
                           <td ng-click="editing = true" class="detail-section-field-info" ng-mouseover="setMode('Carrier_Application')" ng-mouseleave="unsetMode('Carrier_Application')">
                              <span class="text-center invalidfield" ng-show="carAppError && addProdForm.submitted && !editing">{{opp.CarrierApplication}}</span>
                              <span ng-hide="editing || (carAppError && addProdForm.submitted)" class="text-center">{{opp.CarrierApplication}}</span>
                              <select name="carrierApp" multiple="true" ng-show="editing" id="carrierAppSelect" ng-model="selectedValues" ng-options="option for option in carrierApp"
                                 ng-change="reValidate()"></select>
                              <span ng-show="mapOfFieldToMode['Carrier_Application']">
                                 <ng-include src="mapOfFieldToTemplate['Carrier_Application']"></ng-include>
                              </span>
                           </td>
                           <td class="detail-section-field-label"></td>
                           <td class="detail-section-field-info"></td>
                        </tr>

                     </table>
                  </div>
                  <!--Additional Information Section -->
               </div>
               <!--End of of Opportunity Detail Section -->

               <!--Start of Opportunity Product Section -->
               <div class="row detail-header">
                  Products Details
               </div>

               <!--Product Info Button Section -->
               <div class="row text-center product-info-button-row clearfix">
                  <!-- SFDC-6398 -->
                  <!--button class="btn product-info-button" ng-click="addProd()" ng-disabled="freeze" ng-show="addRow" ng-disable="opp.Opportunity_Type == 'Auto-Renewal' && opp.autoRenewCheck">{{mapOfFieldToValue['btn_Add_Product']}}</button-->
                  <button class="btn product-info-button" ng-click="addProd()" ng-disabled="freeze" ng-show="addRow">{{mapOfFieldToValue['btn_Add_Product']}}</button>
                  <button class="btn product-info-button" ng-click="churn()" ng-disabled="freeze">{{mapOfFieldToValue['btn_Churn_Cancel_Contract']}}</button>
                  <!-- SFDC-1290 -->
                  <button class="btn product-info-button" ng-disabled="freeze" data-target="#noContractChangeMessageModal" data-toggle="modal">{{mapOfFieldToValue['btn_No_Contract_Changes']}} </button>
                  <!-- ng-click="resetFactory()" -->

                  <button class="btn product-info-button" ng-show="showUndo" ng-click="undo()">{{mapOfFieldToValue['btn_Undo']}}</button>
                  <!-- SFDC-1290 -->
                  <button class="btn top-button" ng-show="addProdForm.$dirty || isEditing" type="submit" ng-click="save()">{{mapOfFieldToValue['btn_Quick_Save']}}</button>
                  <a ng-href="{{linkToFAQ}}" class="btn-link text-right pull-right text-warning" target="_blank">
                     <strong>
                        <u> Help &amp; Training </u>
                     </strong>
                  </a>
               </div>
               <!-- SFDC-1290 -->
               <div class="modal fade" id="noContractChangeMessageModal" role="dialog">
                  <div class="modal-dialog">
                     <!--  account-search-dialog -->
                     <div class="modal-content">
                        <div class="modal-header">
                           <button class="close" data-dismiss="modal" type="button">&times;</button>
                           <h4 class="modal-title">Confirm</h4>
                        </div>
                        <div class="modal-body">
                           <p>{{mapOfFieldToHelpTextOrError['No_Contract_Changes_Warning_Message']}}</p>
                        </div>
                        <div class="modal-footer">
                           <button type="button" class="btn btn-default" data-ng-click="resetFactory()" data-dismiss="modal">Yes</button>

                           <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                        </div>
                        <!-- accountsearch-modal-body -->

                     </div>
                  </div>
               </div>
               <!--Product Info Button Section -->

               <!--Product Info Table Section -->
               <div class=" row" style="overflow-x:auto;">
                  <table class="table table-responsive table-bordered table-condensed" id="lineItemTable">
                     <tr>
                        <td></td>
                        <td></td>
                        <th>{{mapOfFieldToValue['Product_Name']}}</th>
                        <th>{{mapOfFieldToValue['Baseline_Monthly_Commit']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['curMonthlyCommitFee']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['Projected_Monthly_Commit']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['Projected_Monthly_Commit']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['One_Time_Fee']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['projOneTimeFee']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['Net_MRR']}}
                           <!-- <div > -->
                           <!-- <i class="fa fa-info-circle" data-toggle="tooltip" data-placement="top" title="some text"></i> -->
                           <!-- uib-popover="'popover.html'" popover-placement="bottom" popover-trigger="mouseenter" -->
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['netMRR']}}"></i>
                           <!-- </div> -->
                        </th>
                        <th>{{mapOfFieldToValue['Term']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['Term']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['Baseline_Monthly_Usage']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['curAvgRevNonCommit']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['Projected_Monthly_Usage']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['projAvgRevNonCommit']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['Net_Monthly_Usage']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title=""
                              data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['netNonCommit']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['EMRI_Table_Header']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['emri']}}"></i>
                        </th>
                        <!-- SFDC-3534 -->
                        <th>{{mapOfFieldToValue['Sp_Proj_Monthly_commit']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['Sp_Proj_Monthly_commit']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['Specialist_One_Time_Fee']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['Specialist_One_Time_Fee']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['Specialist_Net_MRR']}}
                        </th>
                        <!-- <th>{{mapOfFieldToValue['Sp_Proj_Monthly_usage']}}
                       <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['Sp_Proj_Monthly_usage']}}"></i>
                     </th> -->
                        <th>{{mapOfFieldToValue['Sp_forecast_cat']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['Sp_forecast_cat']}}"></i>
                        </th>
                        <th>{{mapOfFieldToValue['SP_Close_Date']}}
                           <i class="fa fa-info-circle" aria-hidden="true" title="" data-toggle="popover" data-placement="top" data-content="{{mapOfFieldToHelpTextOrError['SP_Close_Date']}}"></i>
                        </th>
                     </tr>

                     <tr ng-repeat="oli in lineItems | orderBy: [existing,'productName']" item="lineItems" columns="columns" ng-disabled="freeze"
                        ng-class="{'existing': rowExisting}">
                        <td ng-hide="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit)">
                           <button class="btn btn-danger" mwl-confirm="x" title="Cancel" message="Are you sure you want to cancel this product?" confirm-text="Yes"
                              cancel-text="No" placement="right" on-confirm="!freeze && cancel(oli,$index)" on-cancel="console.log(1)"
                              confirm-button-type="danger" cancel-button-type="default" ng-click="console.log(false)">
                              <i class="fa fa-times"></i>
                           </button>
                        </td>
                        <td ng-show="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit)">
                           <button class="btn btn-danger" mwl-confirm="x" title="Delete" message="Are you sure you want to delete this product?" confirm-text="Yes"
                              cancel-text="No" placement="right" on-confirm="!freeze && delete(oli, 0)" on-cancel="console.log(1)"
                              confirm-button-type="danger" cancel-button-type="default" ng-click="console.log(false)">
                              <i class="fa fa-trash"></i>
                           </button>
                        </td>
                        <td ng-hide="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit) || oli.undoLink">
                           <a href="#" ng-click="!freeze && modify($index,0,oli)">Edit</a>
                        </td>
                        <td ng-show="isDelete(oli.curMonthlyCommitFee,oli.curAvgRevNonCommit) && !oli.undoLink">
                           <a href="#" ng-click="!freeze && modify($index,1,oli)">Edit</a>
                        </td>
                        <td ng-show="oli.undoLink">
                           <a href="#" ng-click="!freeze && undoLineItem(oli,$index)">Undo</a>
                        </td>
                        <td class="noneditcolor">{{oli.productName}}</td>
                        <td class="noneditcolor text-right">{{oli.curMonthlyCommitFee | currency : "" : 2}}</td>
                        <td class="text-right" ng-hide="editingData[$index]  && !freeze">
                           {{oli.projMonthlyCommitFee | currency : "" : 2}}</td>
                        <td ng-show="editingData[$index] && !freeze">
                           <input type="number" name="projMonthlyCommitFee{{$index}}" step="any" ng-model="oli.projMonthlyCommitFee" />
                           <!-- SFDC-1288 -->
                           <div ng-messages="addProdForm['projMonthlyCommitFee'+$index].$error">
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="text-right" ng-hide="editingData[$index] && !freeze">{{oli.projOneTimeFee | currency : "" : 2}}</td>
                        <td ng-show="editingData[$index] && !freeze">
                           <input type="number" name="projOneTimeFee{{$index}}" min="0" step="any" ng-model="oli.projOneTimeFee" />
                           <div ng-messages="addProdForm['projOneTimeFee'+$index].$error">
                              <div ng-message="min" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['negError']}}</div>
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.netMRR )}" ng-hide="editingData[$index] && !freeze">{{oli.netMRR | currency : "" : 2}}</td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.netMRR )}" ng-show="editingData[$index] && !freeze">{{netMRR(oli,lineItems,0) | currency : "" : 2}}</td>

                        <td class="text-right" ng-hide="editingData[$index] && !freeze">{{oli.term}}</td>
                        <td ng-show="editingData[$index] && !freeze">
                           <input type="number" name="term" min="0" max="24" step="any" ng-model="oli.term" ng-required="{{termIsRequired}}" ng-change="termChange()"
                           />
                        </td>

                        <td class="noneditcolor text-right">{{oli.curAvgRevNonCommit | currency : "" : 2}}</td>
                        <td class="text-right" ng-hide="editingData[$index] && !freeze">{{oli.projAvgRevNonCommit | currency : "" : 2}}</td>
                        <td ng-show="editingData[$index] && !freeze">
                           <input type="number" name="projAvgRevNonCommit{{$index}}" step="any" ng-model="oli.projAvgRevNonCommit" />
                           <!-- SFDC-1288 -->
                           <div ng-messages="addProdForm['projAvgRevNonCommit'+$index].$error">
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.netNonCommit )}" ng-hide="editingData[$index]">{{oli.netNonCommit | currency : "" : 2}}</td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.netNonCommit )}" ng-show="editingData[$index]">{{netNonCommit(oli,lineItems,0) | currency : "" : 2}}</td>
                        <td class="noneditcolor  text-right" ng-class="{'negValue': isNeg(oli.emri )}" ng-hide="editingData[$index]">{{oli.emri | currency : "" : 2}}</td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.emri )}" ng-show="editingData[$index]">{{netEMRI(oli,lineItems,0) | currency : "" : 2}}</td>
                        <!-- SFDC-3534 -->
                        <td class="text-right" ng-hide="editingData[$index]  && !freeze && isAllowedSpecialistEdit">
                           {{specialistCommit(oli,lineItems,0) | currency : "" : 2}}</td>
                        <td ng-show="editingData[$index] && !freeze && isAllowedSpecialistEdit">
                           <input type="number" name="spProjMonthlyCommitFee{{$index}}" step="any" ng-model="oli.spProjMonthlyCommitFee" ng-value="specialistCommit(oli,lineItems,0)"
                           />
                           <!-- SFDC-1288 -->
                           <div ng-messages="addProdForm['spProjMonthlyCommitFee'+$index].$error">
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="text-right" ng-hide="editingData[$index]  && !freeze && isAllowedSpecialistEdit">
                           {{specialistOneTimeFee(oli,lineItems,0) | currency : "" : 2}}</td>
                        <td ng-show="editingData[$index] && !freeze && isAllowedSpecialistEdit">
                           <input type="number" min="0" name="spOneTimeFee{{$index}}" step="any" ng-model="oli.spOneTimeFee" ng-value="specialistOneTimeFee(oli,lineItems,0)"
                           />
                           <!-- SFDC-1288 -->
                           <div ng-messages="addProdForm['spOneTimeFee'+$index].$error">
                              <div ng-message="min" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['negError']}}</div>
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="noneditcolor text-right">{{oli.spNetMrr | currency : "" : 2}}</td>
                        <!-- <td class = "text-right" ng-hide="editingData[$index]  && !freeze && isAllowedSpecialistEdit">
                     {{specialistUsage(oli,lineItems,0) | currency : "" : 2}}</td>
                     <td ng-show="editingData[$index] && !freeze && isAllowedSpecialistEdit">
                         <input type="number" name="spProjMonthlyUsage{{$index}}"  step="any" ng-model="oli.spProjMonthlyUsage" ng-value="specialistUsage(oli,lineItems,0)"/> -->
                        <!-- SFDC-1288 -->
                        <!-- <div ng-messages="addProdForm['spProjMonthlyUsage'+$index].$error">
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                          </div> 
                     </td> -->
                        <td class="text-right" ng-hide="editingData[$index]  && !freeze && isAllowedSpecialistEdit">
                           {{oli.SpForecastCategory}}</td>
                        <td ng-show="editingData[$index] && !freeze && isAllowedSpecialistEdit">
                           <select name="oliForecastCat{{$index}}" id="oliForecastCatSelect" ng-model="oli.SpForecastCategory" ng-options="option for option in oliForecastCat"
                              ng-change="specialistForecast(oli,lineItems,0)"></select>
                           <!-- SFDC-1288 -->
                           <!-- <div ng-messages="addProdForm['spProjMonthlyCommitFee'+$index].$error">
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                          </div> -->
                        </td>
                        <!--SFDC-5295-->
                        <td class="text-right" ng-hide="editingData[$index] && !freeze && isAllowedSpecialistEdit">
                           {{oli.SpCloseDate | date:'MM/dd/yyyy'}}
                        </td>
                        <td ng-show="editingData[$index] && !freeze && isAllowedSpecialistEdit">
                           <input type="date" name="SpCloseDate{{$index}}" step="any" ng-model="oli.SpCloseDate" ng-change="specialistProductCloseDate(oli,lineItems,0)"
                           />
                        </td>
                        <!--SFDC-5295-->
                     </tr>


                     <tr ng-show="showRow" ng-repeat="oli in addedLineItems">
                        <td>
                           <button class="btn btn-danger" mwl-confirm="x" title="Delete" message="Are you sure you want to delete this product?" confirm-text="Yes"
                              cancel-text="Cancel" placement="right" on-confirm="delete(oli, 1)" on-cancel="console.log(1)"
                              confirm-button-type="danger" cancel-button-type="default" ng-click="console.log(false)">
                              <i class="fa fa-trash"></i>
                           </button>
                        </td>
                        <td/>
                        <td>

                           <select name="prodNameSelect{{$index}}" id="prodNameSelect" ng-model="oli.productName" ng-options="option.PricebookEntries.records[0].Id as option.Name for option in prod"
                              custom-validate="oli.productName" ng-required="true">
                           </select>
                        </td>
                        <td class="noneditcolor text-right">
                           <span>{{oli.curMonthlyCommitFee | currency : "" : 2}}</span>
                        </td>
                        <td>
                           <input type="number" name="projMonthlyCommitFeeAdd{{$index}}" step="any" ng-model="oli.projMonthlyCommitFee" />
                           <!-- SFDC-1288 -->
                           <div ng-messages="addProdForm['projMonthlyCommitFeeAdd'+$index].$error">
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td>
                           <input type="number" name="projOneTimeFeeAdd{{$index}}" min="0" step="any" ng-model="oli.projOneTimeFee" />
                           <div ng-messages="addProdForm['projOneTimeFeeAdd'+$index].$error">
                              <div ng-message="min" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['negError']}}</div>
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.netMRR )}">
                           <span> {{netMRR(oli,addedLineItems,1) | currency : "" : 2}}</span>
                        </td>
                        <!--  SFDC- 3441 -->
                        <td class="text-right" name="Term">
                           <input type="number" id="term" name="term" min="0" max="24" step="any" ng-model="oli.term" ng-required="{{termIsRequired}}"
                              ng-change="termChange()" />
                        </td>
                        <!--  SFDC- 3441 -->
                        <td class="noneditcolor text-right">
                           <span>{{oli.curAvgRevNonCommit | currency : "" : 2}}</span>
                        </td>
                        <td>
                           <input type="number" name="projAvgRevNonCommitAdd{{$index}}" step="any" ng-model="oli.projAvgRevNonCommit" />
                           <!-- SFDC-1288 -->
                           <div ng-messages="addProdForm['projAvgRevNonCommitAdd'+$index].$error">
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.netNonCommit)}">
                           <span>{{netNonCommit(oli,addedLineItems,1) | currency : "" : 2}}</span>
                        </td>
                        <td class="noneditcolor text-right" ng-class="{'negValue': isNeg(oli.emri )}">
                           <span>{{netEMRI(oli,addedLineItems,1) | currency : "" : 2}}</span>
                        </td>
                        <!-- SFDC-3534 -->
                        <td class="text-right" ng-hide="isAllowedSpecialistEdit">
                           {{specialistCommit(oli,addedLineItems,1) | currency : "" : 2}}</td>
                        <td ng-show="isAllowedSpecialistEdit">
                           <input type="number" name="spProjMonthlyCommitFeeAdd{{$index}}" step="any" ng-model="oli.spProjMonthlyCommitFee" />
                           <!-- SFDC-1288 ng-value="specialistCommit(oli,addedLineItems,1)" -->
                           <div ng-messages="addProdForm['spProjMonthlyCommitFeeAdd'+$index].$error">
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="text-right" ng-hide="isAllowedSpecialistEdit">
                           {{specialistOneTimeFee(oli,addedLineItems,1) | currency : "" : 2}}</td>
                        <td ng-show="isAllowedSpecialistEdit">
                           <input type="number" name="spOneTimeFeeAdd{{$index}}" step="any" ng-model="oli.spOneTimeFee" />
                           <!-- SFDC-1288 ng-value="specialistCommit(oli,addedLineItems,1)" -->
                           <div ng-messages="addProdForm['spOneTimeFeeAdd'+$index].$error">
                              <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                           </div>
                        </td>
                        <td class="noneditcolor text-right">{{oli.spNetMrr | currency : "" : 2}}</td>
                        <!-- <td class = "text-right" ng-hide= "isAllowedSpecialistEdit">
                     {{specialistUsage(oli,addedLineItems,1) | currency : "" : 2}}</td>
                     <td ng-show="isAllowedSpecialistEdit">
                         <input type="number" name="spProjMonthlyUsageAdd{{$index}}" step="any" ng-model="oli.spProjMonthlyUsage" ng-value="specialistUsage(oli,addedLineItems,1)"/> -->
                        <!-- SFDC-1288 -->
                        <!-- <div ng-messages="addProdForm['spProjMonthlyUsageAdd'+$index].$error">
                            <div ng-message="number" style="color:maroon" role="alert">{{mapOfFieldToHelpTextOrError['NAN']}}</div>
                        </div>
                     </td> -->
                        <td class="text-right" ng-hide="isAllowedSpecialistEdit">
                           {{oli.SpForecastCategory}}</td>
                        <td ng-show="isAllowedSpecialistEdit">
                           <select name="oliForecastCatAdd{{$index}}" id="oliForecastCatSelect" ng-model="oli.SpForecastCategory" ng-options="option for option in oliForecastCat"
                              ng-change="specialistForecast(oli,addedLineItems,0)"></select>
                        </td>
                        <!--SFDC-5295-->
                        <td class="text-right" ng-hide="isAllowedSpecialistEdit">
                           {{oli.SpCloseDate | date:'MM/dd/yyyy'}}
                        </td>
                        <td ng-show="isAllowedSpecialistEdit">
                           <input type="date" name="SpCloseDate{{$index}}" step="any" ng-model="oli.SpCloseDate" ng-change="specialistProductCloseDate(oli,addedLineItems,0)"
                           />
                        </td>
                        <!--SFDC-5295-->
                     </tr>
                     <tr>
                     </tr>
                     <tr>
                        <td colspan="11"></td>
                     </tr>
                     <tr class="total-row">

                        <td colspan="6">
                           Total
                        </td>

                        <td class="text-right" ng-class="{'negValue': isNeg(mrrTotal)}">
                           {{calculateTotal()}} {{opp.CurrencyCode}} {{mrrTotal | currency : "" : 2}}
                        </td>
                        <td colspan="3"></td>

                        <td class="text-right" ng-class="{'negValue': isNeg(nonCommitTotal)}">
                           {{opp.CurrencyCode}} {{nonCommitTotal | currency : "" : 2}}
                        </td>
                        <td class="text-right" ng-class="{'negValue': isNeg(opp.emriTotal)}">
                           {{opp.CurrencyCode}} {{opp.emriTotal | currency : "" : 2}}
                        </td>
                        <td colspan="5"></td>
                     </tr>
                  </table>
                  <!--Product Info Table Section -->
               </div>
               <!--End of Opportunity Product Section -->


            </form>
            <script language="javascript" type="text/javascript">   
               document.getElementById('loading').style.visibility = 'hidden';
               document.getElementById('loading-in-table').style.visibility = 'hidden';



            </script>
         </div>
      </div>
   </body>

   <!-- To do: sonali - why id has .html -->
   <script type="text/ng-template" id="penciltemplate.html">
              <i class="fa fa-pencil" aria-hidden="true"></i>
       </script>
   <script type="text/ng-template" id="locktemplate.html">
              <i class="fa fa-lock" aria-hidden="true"></i>
       </script>

   </html>
</apex:page>