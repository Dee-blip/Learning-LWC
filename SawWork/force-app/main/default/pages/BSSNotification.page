<apex:page >
  <!-- Begin Default Content REMOVE THIS -->

    
    <a href="/apex/BS_Notifications_Request" target="_blank">Manage ACD Logout/Not Ready Notifications</a>

    <apex:includeScript value="{!URLFOR($Resource.cnx__CnxSfdcResources,'js/ConnectsIntegrationAPI.min.js')}"/>
    <script>

        //alert(Notification.permission);
        //alert(navigator.userAgent);

        if (Notification.permission === "granted") 
        {
            //alert("we have permission");
        }   
        else if (Notification.permission  !== "denied") 
        {
            //alert("we don't have permission");
            const gadgetPath = window.location.pathname;
            const pathElements = gadgetPath.split('/');
            pathElements.pop();
            let url = window.location.origin + pathElements.join('/') + '/BS_Notifications_Request';
            //alert(url);
            //window.open('https://c.eu29.visual.force.com/apex/BS_Notifications_Request', '_blank', 'toolbar=0,location=0,menubar=0,height=100,width=200');
            window.open(url, '_blank', 'toolbar=0,location=0,menubar=0,height=100,width=200');
            Notification.requestPermission().then(permission => {});
        }    

        function showNotification(title, body, icon) {
            const notification= new Notification(title, {
                body: body,          
                icon: icon
            });
        }
        
        function handleCustomResponses(customResponseData, event) {
            for(let response of customResponseData) {
                if (event.oldState.State !== "NOTREADY" && event.newState.State === "NOTREADY" && event.newState.ReasonCode === response.id.toString()) {
                    showNotification(response.title, response.message, "{!URLFOR($Resource.bs_Notifications, '" + response.icon + "')}");          
                }
            }
        }

        function handleStandardResponses(event) {
            ConnectsIntegrationAPI.writeLogError("Agent old state change on Channel " + event.channelType + ": " + event.oldState.State + "(" + event.newState.oldCode + ")");  
            ConnectsIntegrationAPI.writeLogError("Agent state change on Channel " + event.channelType + ": " + event.newState.State + "(" + event.newState.ReasonCode + ")");             
            
            if (event.oldState.State !== "LOGOUT" && event.newState.State === "LOGOUT" && event.channelType === "VOICE" ) 
            {
                showNotification("Agent Logout", "The agent is logged out", "{!URLFOR($Resource.bs_Notifications, 'LogoutAgent.png')}" );               
            }
            
            if (event.newState.State === "NOTREADY" && event.newState.ReasonCode == 50002 ) 
            {
                showNotification("Agent Not Ready", "You have have been reconnected to the Finesse server. You are in not ready state", "{!URLFOR($Resource.bs_Notifications, 'NotReadyAgent.png')}" );          
            } 
            
            if (event.oldState.State == "OUTOFSERVICE" && event.newState.State === "LOGOUT" ) 
            {
                showNotification("Agent Not Ready", "You have have been reconnected to the Finesse server. You are in not ready state", "{!URLFOR($Resource.bs_Notifications, 'NotReadyAgent.png')}" );          
            }

            if (event.oldState.State == "OUTOFSERVICE" && event.newState.State === "NOTREADY" ) 
            {
                showNotification("Agent Not Ready", "You have have been reconnected to the Finesse server. You are in not ready state", "{!URLFOR($Resource.bs_Notifications, 'NotReadyAgent.png')}" );          
            }

            if (event.oldState.State !== "OUTOFSERVICE" && event.newState.State === "OUTOFSERVICE" ) 
            {
                showNotification("Agent disconnected", "You have been disconnected from the Finesse server", "{!URLFOR($Resource.bs_Notifications, 'NotReadyAgent.png')}" );          
            }
        }

        ConnectsIntegrationAPI.waitReady(function () {
                  
            ConnectsIntegrationAPI.getCustomSettings("BrowserNotifications", function (response) {
                if (!response.success) {
                    ConnectsIntegrationAPI.showError("USER", "getCustomSettings failed", response.error);
                } else {
                    let customResponseData = JSON.parse(response.data);
                    if(customResponseData !== null) {
                        ConnectsIntegrationAPI.onAgentStateChange = function (event) {
                            handleCustomResponses(customResponseData, event);
                             handleStandardResponses(event);
                        }
                    }
                }
            });
        });
    </script>
</apex:page>