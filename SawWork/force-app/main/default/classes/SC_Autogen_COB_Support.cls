/*=====================================================================================================+

|  HISTORY  |                                                                            

|  DATE             DEVELOPER       CR(3.41)    DESCRIPTION                                                       

|  ===========      =========       =======     =========== 

|  10-APR-2014      Himanshu Kar    2556174     This is a support class for - SC_Autogen_COB_Batch

|  20-APR-2015      Himanshu Kar    2957996     Added Configuration approach to decide whether Job will run or not

|  13-AUG-2015      Himanshu Kar    3085881     Changed Query to Autogen_Contract_Header_Detail__c instead of Merge Contract Header as per New Design                             

|  17-OCT-2016      Himanshu Kar    3315551     Added Business Hour 

|  18-May-2017      Aditya Sonam    ESESP-584   Removed Parent_Contract_Header__r.Effective_Start_Date__c from method processContractPhase2 
Bug fix for duplicate NCO Case Creation for same Account .

|  20-Jun-2018      Vikas Rudrappa  ESESP-789   Created an autogen Billing case related to each COB case autogenerated for AMG case record type

|  26-Sep-2018      Vamsee S        ESESP-976   Add Prolexic Alert in NCO and ECO ticket

|  16-Oct-2018      Vandhana 		ESESP-693   AMG Case Mgmt Improvement

|  11-Apr-2019      Pinkesh         ESESP-1887  Changed the timezone of DueDate to NewYork(which is set on the business hours)

|  25-Oct-2019      Vikas           ESESP-1581  Added logic to change the number of tasks and related cases creation
+=====================================================================================================*/

public class SC_Autogen_COB_Support
{    
    static set<Id> allAccountIds;
    public BusinessHours bh = [SELECT Id FROM BusinessHours WHERE Name = 'Service Business Hours - 24x5'];
    // Method - 1: Main method for COB Calculation
    // Called from - SC_Autogen_COB_Batch Class
    public void main_COB_Method(List<Autogen_Contract_Header_Detail__c> allReturnContracts)
    {
        allAccountIds = new set<Id>();
        Set<string> allOrgContractIds = new set<string>();
        for(Autogen_Contract_Header_Detail__c ACHD : allReturnContracts)
        {   
            allAccountIds.add(ACHD.Parent_Contract_Header__r.Account_Name__c);
            allOrgContractIds.add(ACHD.Parent_Contract_Header__r.Name);
        }
        
        /*****.............................Phase - 1 Validation.................... ***/
        // Create a List to store Filtered Contracts after Phase-1
        List<Autogen_Contract_Header_Detail__c> listContractPhase1 = new List<Autogen_Contract_Header_Detail__c>();
        
        // Call to processContractPhase1 method: (If Account has more than one Contract)
        listContractPhase1 = processContractPhase1(allReturnContracts);
        
        /*****........................Phase - 2 Validation........................ ***/
        // Create a List to store Filtered Contracts after Phase-2
        List<Autogen_Contract_Header_Detail__c> listContractPhase2 = new List<Autogen_Contract_Header_Detail__c>();
        
        if(listContractPhase1.size() > 0)
        {
            // Call to processContractPhase2 method: (If Account has any Prev Contract)
            listContractPhase2 = processContractPhase2(allAccountIds,allOrgContractIds,listContractPhase1);
        }
        
        // Deallocate memory for Phase-1 List
        listContractPhase1.clear();
        allOrgContractIds.clear();     
        allAccountIds.clear(); 
        
        /*****........................Phase - 3 Case Creation........................ ***/
        // Map to store Created Case Id - Contract Revision Effective Start Date
        Map<Id,Date> caseId_ContrctEffStrdt_Map = new Map<Id,Date>();
        
        if(listContractPhase2.size() > 0)
        {
            caseId_ContrctEffStrdt_Map = createCase(listContractPhase2);
        }
        
        // Deallocate memory for Phase-2 List
        listContractPhase2.clear();
        
        /*****........................Phase - 4 Task Creation........................ ***/
        if(caseId_ContrctEffStrdt_Map.size() > 0)
        {
            createTask(caseId_ContrctEffStrdt_Map);
        }
        
        // Deallocate Memory
        caseId_ContrctEffStrdt_Map.clear();
        
        /*****........................Phase - 5 Update Contracts with Is COB Created=True........................ ***/
        updateAllContractHdr(allReturnContracts);
        allReturnContracts.clear();
    }
    
    /* Method - 2: Method to check if Account has any more than one Contract for current Transaction.
		If more than 1 Contract is there, it will take first created Contract
		Called from - main_COB_Method method 
	*/
    public List<Autogen_Contract_Header_Detail__c> processContractPhase1(List<Autogen_Contract_Header_Detail__c> allReturnContracts)
    {
        // Map will store Account Id - original Contract Id
        Map<Id,Autogen_Contract_Header_Detail__c> account_OrgContrctId_Map = new Map<Id,Autogen_Contract_Header_Detail__c>();
        
        // Create a List to store Filtered Contracts after Phase-1
        List<Autogen_Contract_Header_Detail__c> listContractPhase1 = new List<Autogen_Contract_Header_Detail__c>();
        
        // Loop to Iterate the All Fetched Contract List to Set values for above 2 variables
        for(Autogen_Contract_Header_Detail__c ACHD : allReturnContracts)
        {
            account_OrgContrctId_Map.put(ACHD.Parent_Contract_Header__r.Account_Name__c,ACHD);
        }
        
        // Loop for each account_OrgContrctId_Map Key
        for (Autogen_Contract_Header_Detail__c ACHD : account_OrgContrctId_Map.values())
        {   
            listContractPhase1.add(ACHD);
        }
        account_OrgContrctId_Map.clear();
        return listContractPhase1;
    }
    
    // Method - 3: Method to check if Account has any Prev Contract
    // Called from - main_COB_Method method
    public List<Autogen_Contract_Header_Detail__c> processContractPhase2(set<Id> allAccountIds1,set<string> allOrgContractIds1,List<Autogen_Contract_Header_Detail__c> listContractPhase1)
    {
        // Create a Map to store Account Id - boolean flag
        Map<Id,boolean> accountId_ContractExistMap = new Map<Id,boolean>();
        
        // Create a List to store Filtered Contracts after Phase-1
        List<Autogen_Contract_Header_Detail__c> listContractPhase2 = new List<Autogen_Contract_Header_Detail__c>();
        
        // Query on Contract Header to Check if the Corresponding Account has any existing COB Contract except current One
        For(Autogen_Contract_Header_Detail__c ACHD : [select Id,Parent_Contract_Header__r.Account_Name__c from Autogen_Contract_Header_Detail__c 
                                                      where
                                                      Parent_Contract_Header__r.Locked__c = true and
                                                      Parent_Contract_Header__r.Account_Name__c = :allAccountIds1  and
                                                      Parent_Contract_Header__r.Name <> :allOrgContractIds1 and
                                                      //Parent_Contract_Header__r.Effective_Start_Date__c <= Today and
                                                      //Parent_Contract_Header__r.Effective_Start_Date__c <> null and
                                                      Is_COB_Created__c = True
                                                     ])
        {
            accountId_ContractExistMap.put(ACHD.Parent_Contract_Header__r.Account_Name__c,true);
        }
        
        // Reset the Values for allAccountIds List. It will store the Updated AccountIds which are in Phase-1 Validation
        allAccountIds = new set<Id>();
        
        // Loop for Filter the 1st Phase Contracts
        for(Autogen_Contract_Header_Detail__c ACHD : listContractPhase1){
            
            // Condition to check if any Contract is present for Account. If not then include that for further processing
            if(accountId_ContractExistMap.get(ACHD.Parent_Contract_Header__r.Account_Name__c) == null)
            {
                system.debug('----listContractPhase2----'+listContractPhase2);
                listContractPhase2.add(ACHD);
                allAccountIds.add(ACHD.Parent_Contract_Header__r.Account_Name__c);
            }
        }
        // Return filtered Contracts
        return listContractPhase2;
    }
    
    // Method - 4: Method for Case Creation
    // Called from - main_COB_Method method
    public Map<Id,Date> createCase(List<Autogen_Contract_Header_Detail__c> listContractPhase2)
    { 
        // List to store for Newly Created Case
        List<Case> newCaseList = new List<Case>();
		//Map to store the autogen records
        Map<String,SC_AutogenJob__c> autogenMap = new Map<String,SC_AutogenJob__c>();
        // Map to store Case Id - Contract Revision Effective Start Date
        Map<Id,Date> caseId_ContrctEffStrdt_Map = new Map<Id,Date>();
        List<String> accountRegionList = new List<String>();
        //ESESP-1581 : Map to store Contract Id and Case
        Map<Id,Case> contractCaseIdMap = new Map<Id,Case>();
        //ESESP-1581 : List to store Product list to which Akatec cases should be created
        List<String> cobProductList = new List<String>();
        //ESESP-1581 : List to store newly created Child (Billing and Techncial) case 
        List<Case> newChildCaseList = new List<Case>();
        
        // Map to store Contract Id - Contract Effective Start Date
        Map<Id,Date> contractId_ContrctEffStrdt_Map = new Map<Id,Date>();
        Case eachCaserec;          
        String setSubject;
        String setDescription;
        
        //Fetching Assignment Rule
        AssignmentRule assgnRule = [Select id,name from AssignmentRule where SobjectType ='Case' and Active=True limit 1];
        Database.DMLOptions dmo = new Database.DMLOptions();
        dmo.AssignmentRuleHeader.assignmentRuleId = assgnrule.id;
        dmo.EmailHeader.TriggerUserEmail = true;
        
        //Get all the Contract Headers
        List<Id> contractHeaderIdList = new List<Id>();
        for(Autogen_Contract_Header_Detail__c eachACHD : listContractPhase2)
        {
            contractHeaderIdList.add(eachACHD.Parent_Contract_Header__c);
        }
        
        //filter all the Headers which has Prolexic Product in the Line Item
        Set<Id> ACHDwithProlexicProducts = new set<Id>();
        for(Autogen_Contract_Header_Detail__c eachProlexicACHD : [SELECT Parent_Contract_Header__c FROM Autogen_Contract_Header_Detail__c WHERE Parent_Contract_Header__c IN :contractHeaderIdList AND Marketing_Product_Name__c LIKE '%Prolexic%'])
        {
            ACHDwithProlexicProducts.add(eachProlexicACHD.Parent_Contract_Header__c);
        }
        
        // Fetching Case Record Types
        Map<String, Schema.RecordTypeInfo> rtMap = Case.sObjectType.getDescribe().getRecordTypeInfosByName();
        SC_DGRAT_Reorg_Mapping__c DGRATMapping=  SC_DGRAT_Reorg_Mapping__c.getInstance();
        //Storing the record type Ids
        Id setRecordTypeId = rtMap.get('AMG').getRecordTypeId();
        Id billingCaseRecordTypeId = rtMap.get('Billing').getRecordTypeId();
        Id techncialCaseRecordTypeId = rtMap.get('Technical').getRecordTypeId();
        
        for(SC_AutogenJob__c autogenJob :[Select id, Autogen_UseCase_Name__c, Description__c, subject__c, Request_Type__c, Service__c, Origin__c,Severity__c,
                                          Sub_Type__c, Visibility__c, Service_Category__c,Active__c
                                          from SC_AutogenJob__c])
        {
            autogenMap.put(autogenJob.Autogen_UseCase_Name__c,autogenJob);
        }
        
        for(SC_Utility__mdt utilMetadata : [SELECT Value__c,Active__c,MasterLabel 
                                              FROM SC_Utility__mdt 
                                              WHERE MasterLabel in ('Billing_COB_Account_Regions','COB_Akatec_Case_Products')])
        {
            if(utilMetadata.MasterLabel == 'Billing_COB_Account_Regions' && !String.isEmpty(utilMetadata.Value__c))
                accountRegionList = utilMetadata.Value__c.split(',');
            if(utilMetadata.MasterLabel == 'COB_Akatec_Case_Products' && !String.isEmpty(utilMetadata.Value__c))
                cobProductList = utilMetadata.Value__c.split(',');
        }
        SC_AutogenJob__c AMGAutogenJob = autogenMap.get('AMG-COB');
        // Loop for creating each Case
        for(Autogen_Contract_Header_Detail__c ACHD : listContractPhase2)
        {    
            system.debug('----ACHD Inside Case ---'+ACHD);
                
            //setSubject = 'New Account: [' + ACHD.Parent_Contract_Header__r.Account_Name__r.Name + ' ]: Complete On-boarding Process';  
            setSubject = AMGAutogenJob.subject__c.replace('insert account name',ACHD.Parent_Contract_Header__r.Account_Name__r.Name);
            setSubject = (setSubject.length() > 254) ? setSubject.substring(0,254) : setSubject;
            String opportunityName = (ACHD.Parent_Contract_Header__r.Opportunity_Name__r.Name == null) ? '':ACHD.Parent_Contract_Header__r.Opportunity_Name__r.Name;
            String opportunityId = (ACHD.Parent_Contract_Header__r.Opportunity_Name__r.AKAM_Opportunity_ID__c == null) ? '':ACHD.Parent_Contract_Header__r.Opportunity_Name__r.AKAM_Opportunity_ID__c;    
            String oppLink;
            //Added as part of ESESP-1581
            if(opportunityId != '')
                oppLink = opportunityId+'('+System.URL.getSalesforceBaseUrl().toExternalForm() + '/' + ACHD.Parent_Contract_Header__r.Opportunity_Name__c + ')';
            else
                oppLink = '';
            
            setDescription = AMGAutogenJob.Description__c.replace('insert account name',ACHD.Parent_Contract_Header__r.Account_Name__r.Name);
            setDescription = setDescription.replace('insert account akam id',ACHD.Parent_Contract_Header__r.Account_Name__r.AKAM_Account_ID__c);
            setDescription = setDescription.replace('insert opportunity name',opportunityName);
            setDescription = setDescription.replace('insert opportunity akam id',oppLink);
            
            eachCaserec = new Case();
            eachCaserec.setOptions(dmo);
            eachCaserec.RecordTypeId            = setRecordTypeId;
            eachCaserec.AccountId               = ACHD.Parent_Contract_Header__r.Account_Name__c;
            eachCaserec.Contract__c             = ACHD.Parent_Contract_Header__r.Id;
            eachCaserec.Service__c              = AMGAutogenJob.Service__c;
            eachCaserec.Request_Type__c         = AMGAutogenJob.Request_Type__c;
            eachCaserec.Origin                  = AMGAutogenJob.Origin__c;
            eachCaserec.Severity__c             = AMGAutogenJob.Severity__c;
            eachCaserec.Do_Not_Show_in_Portal__c= true;
            eachCaserec.Subject                 = setSubject;
            eachCaserec.Description             = setDescription;
            eachCaserec.Autogen_UseCase__c  = 'COB';
            eachCaserec.Work_Type__c        = 'Proactive';
            eachCaserec.CLI_Products__c = ACHDwithProlexicProducts.contains(ACHD.Parent_Contract_Header__c) ? 'Prolexic' : '';
            
            // Add the case record to List
            newCaseList.add(eachCaserec);
            
            // Setting Value for contractId_ContrctEffStrdt_Map Map
            contractId_ContrctEffStrdt_Map.put(ACHD.Parent_Contract_Header__r.Id,ACHD.Parent_Contract_Header__r.Effective_Start_Date__c);
        }
        
        // Insert all Cases
        Insert newCaseList;
        
        /* Loop to set caseId_ContrctEffStrdt_Map Map*/
        for (Case cs : newCaseList){
            caseId_ContrctEffStrdt_Map.put(cs.Id, contractId_ContrctEffStrdt_Map.get(cs.Contract__c));
        }
        
        /* Added the logic for creating new related billing case for AMG Autogen Case as per ESESP-789 */
        SC_AutogenJob__c billingAutogenJob = autogenMap.get('Billing-COB');
        for(Case thisCase : [Select id, AccountId,Account.Geography_Formula__c, Account.AKAM_Account_ID__c, Account.Name, Contract__r.Opportunity_Name__r.Name,Contract__r.Opportunity_Name__c,Contract__r.Opportunity_Name__r.AKAM_Opportunity_ID__c,Contract__c,Contract__r.Original_Contract_Id__c, Contract__r.Opportunity_Name__r.Billing_Effective_Date__c from case where id in:(newCaseList)]){
            if(accountRegionList.size() > 0)
            {
                for(String accountRegion : accountRegionList)
                {
                    if(!String.isEmpty(thisCase.Account.Geography_Formula__c))
                    {
                        if(String.valueOf(DGRATMapping.get(accountRegion)).containsIgnoreCase(thisCase.Account.Geography_Formula__c)){
                            newChildCaseList.add(createRelatedCase(thisCase, billingAutogenJob, dmo, billingCaseRecordTypeId,'Billing',null));
                        }
                    }
                }
            }
            else
            {
                newChildCaseList.add(createRelatedCase(thisCase, billingAutogenJob, dmo, billingCaseRecordTypeId,'Billing',null));
            }
            if(thisCase.Contract__c != null)
                contractCaseIdMap.put(thisCase.Contract__c, thisCase);
        }  
        
        //ESESP-1581 : Fetch the CLIs and filter the products to create Akatec child cases
        SC_AutogenJob__c technicalAutogenJob = autogenMap.get('Technical-COB');
        List<Case> parentCaseList = new List<Case>();
        Map<Case,List<String>> parentCaseContractIdMap = new Map<Case,List<String>>();
        system.debug('contractCaseIdMap : '+contractCaseIdMap);
        Map<Id,List<String>> caseProductStringMap = new Map<Id,List<String>>();
        List<String> caseProductString = new List<String>();
        //System.assert(false, contractCaseIdMap.keySet()+'--'+[Select Id, Original_Contract_Id__c from Merge_Contract_Detail__c where Product_Id__c = 'M-LC-162750']+'-'+[SELECT Parent_Contract_Header__c,Is_COB_Created__c FROM Autogen_Contract_Header_Detail__c WHERE createdDate = TOday]);
        if(technicalAutogenJob.Active__c == true){
            for(Merge_Contract_Detail__c thisCLI : [Select Id, Product_Id__c,Product__c,Original_Contract_Id__c from Merge_Contract_Detail__c where Original_Contract_Id__c in: contractCaseIdMap.keySet()]){
                system.debug('thisCLIProduct_Id__c : '+thisCLI.Product_Id__c);
                if(cobProductList.contains(thisCLI.Product_Id__c)){
                    
                    if(caseProductStringMap.get(thisCLI.Original_Contract_Id__c) != Null){
                        String caseProductName = '';
                        if(thisCLI.Product__c != null)
                            caseProductName = ':'+thisCLI.Product__c;
                        
                        caseProductString.add(thisCLI.Product_Id__c+caseProductName);
                        caseProductStringMap.get(thisCLI.Original_Contract_Id__c).addAll(caseProductString);
                        caseProductStringMap.put(thisCLI.Original_Contract_Id__c,caseProductStringMap.get(thisCLI.Original_Contract_Id__c));
                    }
                    else{
                        String caseProductName = '';
                        if(thisCLI.Product__c != null)
                            caseProductName = ':'+thisCLI.Product__c;
                        caseProductStringMap.put(thisCLI.Original_Contract_Id__c,new List<String>{thisCLI.Product_Id__c+caseProductName});
                    }
                    
                    system.debug('caseProductString : '+caseProductString);
                    system.debug('caseProductStringMap : '+caseProductStringMap);
                    parentCaseContractIdMap.put(contractCaseIdMap.get(thisCLI.Original_Contract_Id__c),caseProductStringMap.get(thisCLI.Original_Contract_Id__c));
                }
            }
            parentCaseList.addAll(parentCaseContractIdMap.keySet());
            for(Case thisCase:parentCaseList){
                newChildCaseList.add(createRelatedCase(thisCase, technicalAutogenJob, dmo, techncialCaseRecordTypeId,'Technical',parentCaseContractIdMap));
            }
        }
        
        //Inserting new list of child cases ESESP-789 & ESESP-1581
        if(newChildCaseList.size() > 0)
            insert newChildCaseList;
        
        //Deallocate Memory
        newChildCaseList.clear();
        
        return caseId_ContrctEffStrdt_Map;
    }
    
    // Method - 5: Method to create On-Boarding child cases for ESESP-789 and ESESP-1581
    // Called from - createCase method
    private Case createRelatedCase(Case thisCase, SC_AutogenJob__c autogenJob, Database.DMLOptions dmo, Id caseRecordTypeId, String caseType, Map<Case,List<String>> parentCaseContractIdMap){
        string billingCaseSubject;
        string billingCaseDescription;
        string technicalCaseDescription;
        Case relatedCase;
        relatedCase = new Case();
        if(caseType == 'Billing'){
            billingCaseSubject = autogenJob.subject__c.replace('insert account name',thisCase.Account.Name);
            billingCaseSubject = (billingCaseSubject.length() > 254) ? billingCaseSubject.substring(0,254) : billingCaseSubject;
            String opportunityName = (thisCase.Contract__r.Opportunity_Name__r.Name == null) ? '':thisCase.Contract__r.Opportunity_Name__r.Name;
            String opportunityId = (thisCase.Contract__r.Opportunity_Name__r.AKAM_Opportunity_ID__c == null) ? '':thisCase.Contract__r.Opportunity_Name__r.AKAM_Opportunity_ID__c;
            billingCaseDescription = autogenJob.Description__c.replace('insert account name',thisCase.Account.Name);
            billingCaseDescription = billingCaseDescription.replace('insert account akam id',thisCase.Account.AKAM_Account_ID__c);
            billingCaseDescription = billingCaseDescription.replace('insert opportunity name',opportunityName);
            billingCaseDescription = billingCaseDescription.replace('insert opportunity akam id',opportunityId);
            relatedCase.setOptions(dmo);
            relatedCase.ParentId = thisCase.Id;
            relatedCase.AccountId = thisCase.AccountId;
            relatedCase.RecordTypeId = caseRecordTypeId;
            relatedCase.Service__c = autogenJob.Service__c;
            relatedCase.Request_Type__c = autogenJob.Request_Type__c;
            relatedCase.Case_Assignment_Using_Active_Rules__c = false;
            relatedCase.Origin = autogenJob.Origin__c;
            relatedCase.Status = 'Unassigned';
            relatedCase.Autogen_UseCase__c  = autogenJob.Autogen_UseCase_Name__c;
            relatedCase.Subject = billingCaseSubject;
            relatedCase.Description = billingCaseDescription;
        }
        
        if(caseType == 'Technical'){
            List<String> productIdList = new List<String>();
            system.debug('parentCaseContractIdMap :'+parentCaseContractIdMap);
            if(parentCaseContractIdMap != null){
                productIdList.addAll(parentCaseContractIdMap.get(thisCase));
            }
            system.debug('productIdList in related case : '+productIdList);
            String opportunityName = (thisCase.Contract__r.Opportunity_Name__r.Name == null) ? '':thisCase.Contract__r.Opportunity_Name__r.Name;
            String opportunityId = (thisCase.Contract__r.Opportunity_Name__r.AKAM_Opportunity_ID__c == null) ? '':thisCase.Contract__r.Opportunity_Name__r.AKAM_Opportunity_ID__c;
            String contractId = (thisCase.Contract__r.Original_Contract_Id__c == null) ? '':thisCase.Contract__r.Original_Contract_Id__c;
            String BEDString = String.valueOf(thisCase.Contract__r.Opportunity_Name__r.Billing_Effective_Date__c);
            String BED = (BEDString == null) ? '':BEDString;
            technicalCaseDescription = autogenJob.Description__c.replace('insert account name',thisCase.Account.Name);
            technicalCaseDescription = technicalCaseDescription.replace('insert account akam id',thisCase.Account.AKAM_Account_ID__c);
            technicalCaseDescription = technicalCaseDescription.replace('insert opportunity name',opportunityName);
            technicalCaseDescription = technicalCaseDescription.replace('insert opportunity akam id',opportunityId);
            technicalCaseDescription = technicalCaseDescription.replace('insert contract id',contractId);
            technicalCaseDescription = technicalCaseDescription.replace('insert BED',BED);
            technicalCaseDescription = technicalCaseDescription.replace('insert link to products', String.join(productIdList, ','));

            relatedCase.setOptions(dmo);
            relatedCase.ParentId = thisCase.Id;
            relatedCase.AccountId = thisCase.AccountId;
            relatedCase.RecordTypeId = caseRecordTypeId;
            relatedCase.Sub_Type__c = autogenJob.Sub_Type__c;
            relatedCase.Do_Not_Show_In_Portal_Picklist__c = autogenJob.Visibility__c;
            relatedCase.Work_Type__c = 'Proactive';
            relatedCase.Service_Category__c = autogenJob.Service_Category__c ;
            relatedCase.Subject = autogenJob.subject__c.replace('insert account name',thisCase.Account.Name);
            relatedCase.Description = technicalCaseDescription;
            relatedCase.Severity__c = autogenJob.Severity__c;
            relatedCase.Case_Assignment_Using_Active_Rules__c = false;
            relatedCase.Origin = autogenJob.Origin__c;
            relatedCase.Status = 'Unassigned';
        }
        return relatedCase;
    }
    
    //Method to create On-boarding Billing Case ESESP-789
    /*private Case createBillingCase(Case thisCase, SC_AutogenJob__c billingAutogenJob, Database.DMLOptions dmo, Id billingCaseRecordTypeId)
    {
        string billingCaseSubject;
        string billingCaseDescription;
        Case billingCase;
        
        billingCaseSubject = billingAutogenJob.subject__c.replace('insert account name',thisCase.Account.Name);
        billingCaseSubject = (billingCaseSubject.length() > 254) ? billingCaseSubject.substring(0,254) : billingCaseSubject;
        String opportunityName = (thisCase.Contract__r.Opportunity_Name__r.Name == null) ? '':thisCase.Contract__r.Opportunity_Name__r.Name;
        String opportunityId = (thisCase.Contract__r.Opportunity_Name__r.AKAM_Opportunity_ID__c == null) ? '':thisCase.Contract__r.Opportunity_Name__r.AKAM_Opportunity_ID__c;
        billingCaseDescription = billingAutogenJob.Description__c.replace('insert account name',thisCase.Account.Name);
        billingCaseDescription = billingCaseDescription.replace('insert account akam id',thisCase.Account.AKAM_Account_ID__c);
        billingCaseDescription = billingCaseDescription.replace('insert opportunity name',opportunityName);
        billingCaseDescription = billingCaseDescription.replace('insert opportunity akam id',opportunityId);
        
        billingCase = new Case();
        billingCase.setOptions(dmo);
        billingCase.ParentId = thisCase.Id;
        billingCase.AccountId = thisCase.AccountId;
        billingCase.RecordTypeId = billingCaseRecordTypeId;
        billingCase.Service__c = billingAutogenJob.Service__c;
        billingCase.Request_Type__c = billingAutogenJob.Request_Type__c;
        billingCase.Case_Assignment_Using_Active_Rules__c = false;
        billingCase.Origin = billingAutogenJob.Origin__c;
        billingCase.Status = 'Unassigned';
        billingCase.Autogen_UseCase__c  = billingAutogenJob.Autogen_UseCase_Name__c;
        billingCase.Subject = billingCaseSubject;
        billingCase.Description = billingCaseDescription;
        return billingCase;
    }

    //Method to create On-boarding Techncial Case ESESP-1581
    private Case createTechnicalCase(Case thisCase, SC_AutogenJob__c technicalAutogenJob, Database.DMLOptions dmo, Id techncialCaseRecordTypeId)
    {
        Case techCase;

        techCase = new Case();
        techCase.setOptions(dmo);
        techCase.ParentId = thisCase.Id;
        techCase.AccountId = thisCase.AccountId;
        techCase.RecordTypeId = techncialCaseRecordTypeId;
        techCase.Sub_Type__c = technicalAutogenJob.Sub_Type__c;
        techCase.Do_Not_Show_In_Portal_Picklist__c = technicalAutogenJob.Visibility__c;
        techCase.Work_Type__c = 'Proactive';
        techCase.Service_Category__c = technicalAutogenJob.Service_Category__c ;
        techCase.Subject = technicalAutogenJob.subject__c;
        techCase.Description = technicalAutogenJob.Description__c;
        techCase.Severity__c = technicalAutogenJob.Severity__c;
        techCase.Case_Assignment_Using_Active_Rules__c = false;
        techCase.Status = 'Unassigned';
        return techCase;
    }*/
    
    // Method - 6: Method for Task Creation
    // Called from - main_COB_Method method
    public void createTask(Map<Id,Date> caseId_ContrctEffStrdt_Map)
    {    
        //ESESP-1581
        List<Case> caseList = new List<Case>([Select id,Origin,Subject,Account.Name,Description,Account.Support_Level__c,Contract__c,AccountId,Account.IsPartner,Account.Customer_Tier__c,Account.Indirect_Customer__c from Case where Id IN :caseId_ContrctEffStrdt_Map.keyset()]);
        
        Map<Id,List<String>> caseIdProductMap = new Map<Id,List<String>>();
        Map<Id,Id> caseAccountIdMap = new Map<Id,Id>();
        Map<Id,List<SC_AutoGencase_Activity__c>> caseIdActivityListMap = new Map<Id,List<SC_AutoGencase_Activity__c>>();
        List<SC_AutoGencase_Activity__c>  allActivityValues;
        List<Case> childCaseCreationList = new List<Case>();
        
        for(Case eachCase : caseList){
            caseAccountIdMap.put(eachCase.AccountId,eachCase.id);
            if(eachCase.Account.Support_Level__c != Null && (eachCase.Account.Support_Level__c.contains('Premium') || (eachCase.Account.Support_Level__c.contains('Enhanced') && !eachCase.Account.Support_Level__c.contains('Standard')))){
                childCaseCreationList.add(eachCase); 
            }
        }
        
        if(childCaseCreationList.size()>0)
            //createChildCase(childCaseCreationList);
        
        childCaseCreationList.clear();
        
        List<Merge_Contract_Header__c > allContractId = new List<Merge_Contract_Header__c >();
        for(Merge_Contract_Header__c eachContract :[Select id,Account_Name__c from Merge_Contract_Header__c where Account_Name__r.Id IN : caseAccountIdMap.keyset() and Effective_Start_Date__c <= Today and Effective_Start_Date__c <> null and Locked__c = true]){
            allContractId.add(eachContract);
        }
        Map<Id,String> accountIdProdMap = new Map<Id,String>();
        //List<String> accountIdListWithIntProd = new List<String>();
        for(Merge_Contract_Detail__c eachContractLine :[Select id,Product_Id__c,Original_Contract_Id__r.Account_Name__r.Id from Merge_Contract_Detail__c where Original_Contract_Id__r.Id IN : allContractId and Product_Id__c = 'M-LC-134885']){
            accountIdProdMap.put(eachContractLine.Original_Contract_Id__r.Account_Name__r.Id,eachContractLine.Product_Id__c);
        }
        
        for(Case eachCase : caseList){
            
            allActivityValues = new List<SC_AutoGencase_Activity__c>();
            
            for(SC_AutoGencase_Activity__c eachActivityRec : SC_AutoGencase_Activity__c.getall().values())
            {    
                if(eachActivityRec.UseCase_Type__c == 'COB')
                {   
                    //ESESP-1581: Add only tasks which has to be created by checking the Active__c field
                    if(eachActivityRec.Active__c){
                            allActivityValues.add(eachActivityRec);
                    }
                    /*if(eachActivityRec.Activity_Name__c != 'Billing Introduction'){
                            allActivityValues.add(eachActivityRec);
                    }*/
                    
                    /*system.debug('----eachActivityRec---'+eachActivityRec);
                    if(eachActivityRec.Activity_Name__c == 'Welcome Email' || eachActivityRec.Activity_Name__c =='Engagement Doc'){
                        if(!eachCase.Account.Indirect_Customer__c){
                            allActivityValues.add(eachActivityRec);
                        }
                    }
                    else if(eachActivityRec.Activity_Name__c =='Partner Luna Portal Walk Through' || eachActivityRec.Activity_Name__c =='NAP Portal Walk Through'){
                        if(eachCase.Account.IsPartner){
                            allActivityValues.add(eachActivityRec);
                        }
                    }
                    else if(eachActivityRec.Activity_Name__c == 'Special Intructions/Customer WIKI Page'){
                        if(eachCase.Account.Customer_Tier__c == 'A' || eachCase.Account.Customer_Tier__c =='A+' || eachCase.Account.Customer_Tier__c == 'B'){
                          allActivityValues.add(eachActivityRec);  
                        } 
                    }  
                    else if(eachActivityRec.Activity_Name__c =='Discovery Call'){
                        if(accountIdProdMap.containsKey(eachCase.AccountId)){
                            allActivityValues.add(eachActivityRec);
                        }
                    } 
                    else if(eachActivityRec.Activity_Name__c =='AkaTec Primary Assignment'){
                        if(eachCase.Account.Support_Level__c != Null && (!eachCase.Account.Support_Level__c.contains('Premium') || (eachCase.Account.Support_Level__c.contains('Enhanced') && eachCase.Account.Support_Level__c.contains('Standard')))){
                            allActivityValues.add(eachActivityRec);
                        }
                    }
                    else
                        allActivityValues.add(eachActivityRec);*/
                }
                system.debug('----After if eachActivityRec---'+eachActivityRec);
            }
            system.debug('----Case allActivityValues---'+eachCase.id+'::::'+allActivityValues.size());
            caseIdActivityListMap.put(eachCase.id,allActivityValues);
        }
        
        caseList.clear();
        
        //End of ESESP-1581
        
        //Commented as part of ESESP-1581: Moved the logic to create activity based on condition above
        // Fetch the Data from Custom Setting - AutoGencase - Activity
        /*List<SC_AutoGencase_Activity__c>  allActivityValues = new List<SC_AutoGencase_Activity__c>();
        for(SC_AutoGencase_Activity__c eachActivityRec : SC_AutoGencase_Activity__c.getall().values())
        {    
            if(eachActivityRec.UseCase_Type__c == 'COB')
            {    
            	allActivityValues.add(eachActivityRec);
            }
        }*/
        
        // Fetch Default Task Owner from Custom Setting - SC_SupportEmail__c
        string getOwnerAlias = SC_SupportEmail__c.getValues('1').Default_Task_Owner__c;
        
        // Fetch User Id from User Alias
        List<User> userRec = new  List<User>();
        userRec = [select Id from user where alias = :getOwnerAlias limit 1];
        
        // Fetching Service Activity record Type from Task Obj
        Map<String, Schema.RecordTypeInfo> rtMap = Task.sObjectType.getDescribe().getRecordTypeInfosByName();
        
        // changes - ESESP-693 : changed Task Record Type to AMG Activity
        //Id setRecordTypeId = rtMap.get('Service Activity').getRecordTypeId();
        Id setRecordTypeId = rtMap.get('AMG Activity').getRecordTypeId();
        
        // List of Task which are going to create
        List<Task> allTaskInsertList = new List<Task>();
        
        // Task record used inside Loop for each Record
        Task newtask;
        
        // Variable to store Activity Date
        DateTime setActdate;
        DateTime setActdatetime;
        
        // 1 Day Milli sec Value - For Business Hour Calculation
        Long milliSecValuefor1Day = 86400000;

        //Get the hours difference from New York timezone which is set on the business hours
        Timezone tz = Timezone.getTimeZone('America/New_York');
        Integer offsetHours = tz.getOffset(System.now())/3600000;
        
        // Variable to get No Of Days for Setting Activity Due date
        Integer getNoOfDaysForTask;

        Map<Id,Case> caseOwnerMap = new Map<Id,Case>();
        caseOwnerMap = new Map<Id,Case>([Select OwnerId from Case where ID in :caseId_ContrctEffStrdt_Map.keyset()]);
        
        // Loop for each Case Id
        for (Id eachCaseId : caseId_ContrctEffStrdt_Map.keyset())
        {    
            // Loop for each Task Record from Custom setting
            //Changed iteration as part of ESESP-1581
            for(SC_AutoGencase_Activity__c allActivityVal :caseIdActivityListMap.get(eachCaseId))
            {
                // Derivation for Activity Date
                if (allActivityVal.Activity_Due_date__c == NULL)
                {
                    setActdate = caseId_ContrctEffStrdt_Map.get(eachCaseId) ;    
                }
                else{
                    getNoOfDaysForTask = Integer.valueOf(allActivityVal.Activity_Due_date__c);
                    // Calculating Business Hour                
                    setActdate  = BusinessHours.add(bh.id, system.now(), milliSecValuefor1Day * getNoOfDaysForTask).addHours(offsetHours);
                    setActdatetime = BusinessHours.add(bh.id, system.now(), milliSecValuefor1Day * getNoOfDaysForTask);
                    if(allActivityVal.Is_Activity_Calendar_Days__c){
                        getNoOfDaysForTask = Integer.valueOf(allActivityVal.Activity_Due_date__c);
                        setActdate = DateTime.Now().AddDays(getNoOfDaysForTask);
                        setActdatetime = DateTime.Now().AddHours(getNoOfDaysForTask*24);
                    }
                }
                newtask = new Task();
                newtask.Subject                  =   allActivityVal.Activity_Name__c;
                newtask.Description              =   allActivityVal.Activity_Details__c;
                newtask.ActivityDate             =   Date.valueOf(setActdate);                  
                newtask.Type__c                  =   'Task';
                newtask.Status                   =   'Not Started'; 
                newtask.WhatId                   =   eachCaseId;
                //newtask.OwnerId                  =   userRec[0].Id;
                if(String.valueOf(caseOwnerMap.get(eachCaseId).OwnerId).startsWith(Schema.SObjectType.User.getKeyPrefix()))
                    newTask.OwnerId             =   caseOwnerMap.get(eachCaseId).OwnerId;
                else
                    newtask.OwnerId             =   userRec[0].Id;
                newtask.RecordTypeId             =   setRecordTypeId;
                if (newTask.subject=='User Setup'){
                    newTask.DueDateProlexic__c = setActdatetime;
                }
                // Adding to List
                allTaskInsertList.add(newtask);
            }
        }
        
        // Create Task
        Insert allTaskInsertList;
        
    }
    
    // Method - 7: Method for Updating all Contract Headres with IS COB Created = True
    // Called from - main_COB_Method method
    public void updateAllContractHdr(List<Autogen_Contract_Header_Detail__c> allReturnContracts){
        
        // List to Update all Contracts
        List<Autogen_Contract_Header_Detail__c> allReturnContractsUpdate = new List<Autogen_Contract_Header_Detail__c>();
        
        // Loop for each Contract
        for(Autogen_Contract_Header_Detail__c ACHD : allReturnContracts)
        {    
            ACHD.Is_COB_Created__c = True;
            allReturnContractsUpdate.add(ACHD);
        }
        
        // Update All Contracts
        Update allReturnContractsUpdate;
        
    }
    
    //ESESP-1581: Method for child case where Account has support level Premium
    public void createChildCase(List<Case> childCaseList){
       /* Map<String, Schema.RecordTypeInfo> rtMap = Case.sObjectType.getDescribe().getRecordTypeInfosByName();
        Id setRecordTypeId = rtMap.get('Technical').getRecordTypeId();
        List<Case> childCaseListForInsert = new List<Case>();
        Case eachCaserec;
        for(Case eachCase : childCaseList){
            eachCaserec = new Case();
            eachCaserec.RecordTypeId            = setRecordTypeId;
            eachCaserec.AccountId               = eachCase.AccountId;
            eachCaserec.Contract__c             = eachCase.Contract__c;
            eachCaserec.Sub_Type__c             = 'Service & Support Packages';
            eachCaserec.Service_Category__c     = 'Onboarding';
            eachCaserec.Origin                  = eachCase.Origin;
            eachCaserec.Severity__c             = '3';
            eachCaserec.Do_Not_Show_in_Portal__c= true;
            eachCaserec.Subject                 = 'Onboarding Request for '+eachCase.Account.Name+' - Support package';
            eachCaserec.Description             = 'Onboarding Request for '+eachCase.Account.Name+' - Support package';
            eachCaserec.Autogen_UseCase__c  	= 'COB';
            eachCaserec.Work_Type__c        	= 'Proactive';
            eachCaserec.Case_Assignment_Using_Active_Rules__c = true;
            eachCaserec.ParentId 				= eachCase.Id;
            childCaseListForInsert.add(eachCaserec);
        }
        
        insert childCaseListForInsert;*/
        
    }
    
    // Method - 8: Method for Sending Email if any Error is there in Batch
    // Called from - Finish Method of SC_Autogen_COB_Batch Class
    public void senEmailForError(string emailSubject, string emailBody)
    {    
        // Fetch Support Email Address from Custom Setting - SC_SupportEmail__c
        SC_SupportEmail__c supEmailValues = SC_SupportEmail__c.getValues('1');
        
        // Setting To Address
        String[] toAdd = new String[] {};
            toAdd.add(supEmailValues.Support_Email_AutoGen__c);
        
        // Sending Email
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.setToAddresses(toAdd);
        mail.subject = emailSubject;
        mail.plainTextBody = emailBody;
        Messaging.SendEmailResult [] r = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {mail});        
    } 
}